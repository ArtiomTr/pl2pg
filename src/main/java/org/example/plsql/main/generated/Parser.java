
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.plsql.main.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.example.plsql.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PlSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\023" +
    "\004\000\002\023\002\000\002\022\003\000\002\021\007" +
    "\000\002\003\004\000\002\003\002\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\004\000\002\006" +
    "\002\000\002\010\006\000\002\011\007\000\002\012\013" +
    "\000\002\015\011\000\002\015\010\000\002\017\004\000" +
    "\002\017\003\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\013\007\000\002\013\002\000\002\014" +
    "\004\000\002\014\002\000\002\024\003\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\027\004\000\002\027\003\000\002\036\007\000\002" +
    "\036\010\000\002\036\003\000\002\037\005\000\002\037" +
    "\006\000\002\037\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\003\000\002\033\004" +
    "\000\002\033\004\000\002\033\003\000\002\034\005\000" +
    "\002\034\003\000\002\040\003\000\002\040\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\010\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\005\000" +
    "\002\007\003\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\220\001\002\000\006\002\000\004\010\001\002\000\030" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012" +
    "\ufffd\015\ufffd\016\ufffd\057\ufffd\060\ufffd\001\002\000\006" +
    "\002\uffff\004\uffff\001\002\000\020\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\015\ufffa\057\ufffa\060\ufffa\001\002\000\020" +
    "\004\ufff2\005\014\006\ufff2\007\ufff2\015\ufff2\057\ufff2\060" +
    "\ufff2\001\002\000\016\004\010\006\021\007\024\015\026" +
    "\057\022\060\027\001\002\000\024\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\015\ufffb\057\ufffb\060\ufffb" +
    "\001\002\000\006\017\uffb6\060\016\001\002\000\004\017" +
    "\017\001\002\000\004\017\uffb7\001\002\000\030\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\015" +
    "\ufffc\016\ufffc\057\ufffc\060\ufffc\001\002\000\026\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\015\ufff5\016" +
    "\ufff5\057\ufff5\060\ufff5\001\002\000\020\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\015\ufffa\057\ufffa\060\ufffa\001\002\000" +
    "\016\004\ufff3\006\ufff3\007\ufff3\015\ufff3\057\ufff3\060\ufff3" +
    "\001\002\000\026\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\016\ufff7\057\ufff7\060\ufff7\001\002" +
    "\000\030\014\036\022\045\034\046\035\053\042\044\052" +
    "\063\053\043\054\054\055\040\056\055\060\041\001\002" +
    "\000\026\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012" +
    "\ufff4\015\ufff4\016\ufff4\057\ufff4\060\ufff4\001\002\000\032" +
    "\014\036\016\156\022\045\034\046\035\053\042\044\052" +
    "\063\053\043\054\054\055\040\056\055\060\041\001\002" +
    "\000\004\024\033\001\002\000\026\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\057\ufff9" +
    "\060\ufff9\001\002\000\026\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\057\ufff6\060\ufff6" +
    "\001\002\000\026\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\057\ufff8\060\ufff8\001\002" +
    "\000\030\014\036\022\045\034\046\035\053\042\044\052" +
    "\063\053\043\054\054\055\040\056\055\060\041\001\002" +
    "\000\052\010\uffc9\016\uffc9\017\uffc9\023\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\045" +
    "\uffc9\046\uffc9\001\002\000\040\010\uffd7\016\uffd7\017\uffd7" +
    "\023\uffd7\025\137\026\135\027\140\030\141\031\134\032" +
    "\136\040\uffd7\041\uffd7\042\uffd7\045\uffd7\046\133\001\002" +
    "\000\010\047\uffc2\050\uffc2\051\uffc2\001\002\000\010\047" +
    "\132\050\131\051\130\001\002\000\054\010\uffc0\016\uffc0" +
    "\017\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0\001" +
    "\002\000\056\010\uffc1\016\uffc1\017\uffc1\021\123\023\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\045\uffc1\046\uffc1\001\002\000\014\010" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\041\121\001\002\000\054" +
    "\010\uffbe\016\uffbe\017\uffbe\023\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\046\uffbe\001\002\000\030\014\036\022\045\034\046" +
    "\035\053\042\044\052\063\053\043\054\054\055\040\056" +
    "\055\060\041\001\002\000\030\014\036\022\045\034\046" +
    "\035\053\042\044\052\063\053\043\054\054\055\040\056" +
    "\055\060\041\001\002\000\026\014\036\022\045\034\046" +
    "\035\053\052\063\053\043\054\054\055\040\056\055\060" +
    "\041\001\002\000\016\010\uffe1\016\uffe1\017\uffe1\023\uffe1" +
    "\040\113\041\uffe1\001\002\000\004\017\112\001\002\000" +
    "\046\010\uffd0\016\uffd0\017\uffd0\023\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\105\034\106\035" +
    "\104\040\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0\001\002" +
    "\000\054\010\uffc6\016\uffc6\017\uffc6\023\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\102\045\uffc6\046\uffc6\001\002\000\026\014\036\022\045" +
    "\034\046\035\053\052\063\053\043\054\054\055\040\056" +
    "\055\060\041\001\002\000\054\010\uffbd\016\uffbd\017\uffbd" +
    "\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\001\002\000" +
    "\010\047\uffc3\050\uffc3\051\uffc3\001\002\000\052\010\uffcc" +
    "\016\uffcc\017\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\076" +
    "\037\075\040\uffcc\041\uffcc\042\uffcc\045\uffcc\046\uffcc\001" +
    "\002\000\054\010\uffc4\016\uffc4\017\uffc4\023\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\045\uffc4\046\uffc4\001\002\000\016\010\uffdf\016" +
    "\uffdf\017\uffdf\023\uffdf\040\uffdf\041\uffdf\001\002\000\016" +
    "\010\uffdd\016\uffdd\017\uffdd\023\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\022\010\uffda\016\uffda\017\uffda\023\uffda\040\uffda" +
    "\041\uffda\042\064\045\065\001\002\000\054\010\uffbf\016" +
    "\uffbf\017\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf" +
    "\001\002\000\004\045\071\001\002\000\026\014\036\022" +
    "\045\034\046\035\053\052\063\053\043\054\054\055\040" +
    "\056\055\060\041\001\002\000\004\040\067\001\002\000" +
    "\026\014\036\022\045\034\046\035\053\052\063\053\043" +
    "\054\054\055\040\056\055\060\041\001\002\000\016\010" +
    "\uffdc\016\uffdc\017\uffdc\023\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\026\014\036\022\045\034\046\035\053\052\063\053" +
    "\043\054\054\055\040\056\055\060\041\001\002\000\004" +
    "\040\073\001\002\000\026\014\036\022\045\034\046\035" +
    "\053\052\063\053\043\054\054\055\040\056\055\060\041" +
    "\001\002\000\016\010\uffdb\016\uffdb\017\uffdb\023\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\026\014\036\022\045\034\046" +
    "\035\053\052\063\053\043\054\054\055\040\056\055\060" +
    "\041\001\002\000\026\014\036\022\045\034\046\035\053" +
    "\052\063\053\043\054\054\055\040\056\055\060\041\001" +
    "\002\000\052\010\uffcb\016\uffcb\017\uffcb\023\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\045\uffcb\046\uffcb\001\002\000\052\010\uffca\016\uffca\017" +
    "\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\045\uffca\046\uffca\001\002\000\052" +
    "\010\uffc7\016\uffc7\017\uffc7\023\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046" +
    "\uffc7\001\002\000\022\014\036\022\045\052\063\053\043" +
    "\054\054\055\040\056\055\060\041\001\002\000\054\010" +
    "\uffc5\016\uffc5\017\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\001\002\000\026\014\036\022\045\034\046\035" +
    "\053\052\063\053\043\054\054\055\040\056\055\060\041" +
    "\001\002\000\026\014\036\022\045\034\046\035\053\052" +
    "\063\053\043\054\054\055\040\056\055\060\041\001\002" +
    "\000\026\014\036\022\045\034\046\035\053\052\063\053" +
    "\043\054\054\055\040\056\055\060\041\001\002\000\052" +
    "\010\uffcf\016\uffcf\017\uffcf\023\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\076\037\075\040\uffcf\041\uffcf\042\uffcf\045\uffcf\046" +
    "\uffcf\001\002\000\052\010\uffcd\016\uffcd\017\uffcd\023\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\076\037\075\040\uffcd\041\uffcd" +
    "\042\uffcd\045\uffcd\046\uffcd\001\002\000\052\010\uffce\016" +
    "\uffce\017\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\076\037" +
    "\075\040\uffce\041\uffce\042\uffce\045\uffce\046\uffce\001\002" +
    "\000\026\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\015\ufff1\016\ufff1\057\ufff1\060\ufff1\001\002\000\030" +
    "\014\036\022\045\034\046\035\053\042\044\052\063\053" +
    "\043\054\054\055\040\056\055\060\041\001\002\000\016" +
    "\010\uffe0\016\uffe0\017\uffe0\023\uffe0\040\uffe0\041\uffe0\001" +
    "\002\000\052\010\uffc8\016\uffc8\017\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\004\023\117\001\002\000" +
    "\054\010\uffb8\016\uffb8\017\uffb8\023\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\045\uffb8\046\uffb8\001\002\000\016\010\uffde\016\uffde\017" +
    "\uffde\023\uffde\040\uffde\041\uffde\001\002\000\030\014\036" +
    "\022\045\034\046\035\053\042\044\052\063\053\043\054" +
    "\054\055\040\056\055\060\041\001\002\000\016\010\uffe2" +
    "\016\uffe2\017\uffe2\023\uffe2\040\113\041\uffe2\001\002\000" +
    "\004\044\124\001\002\000\004\022\125\001\002\000\030" +
    "\014\036\022\045\034\046\035\053\042\044\052\063\053" +
    "\043\054\054\055\040\056\055\060\041\001\002\000\004" +
    "\023\127\001\002\000\054\010\uffbc\016\uffbc\017\uffbc\023" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\001\002\000\054" +
    "\010\uffb9\016\uffb9\017\uffb9\023\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045" +
    "\uffb9\046\uffb9\001\002\000\054\010\uffba\016\uffba\017\uffba" +
    "\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\045\uffba\046\uffba\001\002\000" +
    "\054\010\uffbb\016\uffbb\017\uffbb\023\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\001\002\000\006\042\150\052\151\001" +
    "\002\000\026\014\036\022\045\034\046\035\053\052\063" +
    "\053\043\054\054\055\040\056\055\060\041\001\002\000" +
    "\026\014\036\022\045\034\046\035\053\052\063\053\043" +
    "\054\054\055\040\056\055\060\041\001\002\000\026\014" +
    "\036\022\045\034\046\035\053\052\063\053\043\054\054" +
    "\055\040\056\055\060\041\001\002\000\026\014\036\022" +
    "\045\034\046\035\053\052\063\053\043\054\054\055\040" +
    "\056\055\060\041\001\002\000\026\014\036\022\045\034" +
    "\046\035\053\052\063\053\043\054\054\055\040\056\055" +
    "\060\041\001\002\000\026\014\036\022\045\034\046\035" +
    "\053\052\063\053\043\054\054\055\040\056\055\060\041" +
    "\001\002\000\046\010\uffd4\016\uffd4\017\uffd4\023\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\105" +
    "\034\106\035\104\040\uffd4\041\uffd4\042\uffd4\045\uffd4\046" +
    "\uffd4\001\002\000\046\010\uffd6\016\uffd6\017\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\105\034\106\035\104\040\uffd6\041\uffd6\042\uffd6\045\uffd6" +
    "\046\uffd6\001\002\000\046\010\uffd2\016\uffd2\017\uffd2\023" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\105\034\106\035\104\040\uffd2\041\uffd2\042\uffd2\045" +
    "\uffd2\046\uffd2\001\002\000\046\010\uffd3\016\uffd3\017\uffd3" +
    "\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\105\034\106\035\104\040\uffd3\041\uffd3\042\uffd3" +
    "\045\uffd3\046\uffd3\001\002\000\046\010\uffd1\016\uffd1\017" +
    "\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\105\034\106\035\104\040\uffd1\041\uffd1\042" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\046\010\uffd5\016\uffd5" +
    "\017\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\105\034\106\035\104\040\uffd5\041\uffd5" +
    "\042\uffd5\045\uffd5\046\uffd5\001\002\000\004\052\152\001" +
    "\002\000\022\010\uffd9\016\uffd9\017\uffd9\023\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\045\uffd9\001\002\000\022\010\uffd8\016" +
    "\uffd8\017\uffd8\023\uffd8\040\uffd8\041\uffd8\042\uffd8\045\uffd8" +
    "\001\002\000\010\005\uffeb\012\uffeb\016\uffeb\001\002\000" +
    "\004\016\156\001\002\000\010\005\uffe8\012\162\016\156" +
    "\001\002\000\030\014\036\022\045\034\046\035\053\042" +
    "\044\052\063\053\043\054\054\055\040\056\055\060\041" +
    "\001\002\000\004\010\160\001\002\000\016\004\ufff2\006" +
    "\ufff2\007\ufff2\015\ufff2\057\ufff2\060\ufff2\001\002\000\010" +
    "\005\uffea\012\uffea\016\uffea\001\002\000\016\004\ufff2\006" +
    "\ufff2\007\ufff2\015\ufff2\057\ufff2\060\ufff2\001\002\000\004" +
    "\005\165\001\002\000\010\005\uffec\012\uffec\016\uffec\001" +
    "\002\000\004\015\166\001\002\000\004\017\167\001\002" +
    "\000\026\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012" +
    "\uffed\015\uffed\016\uffed\057\uffed\060\uffed\001\002\000\004" +
    "\005\uffe9\001\002\000\010\005\uffe8\012\162\016\156\001" +
    "\002\000\004\005\173\001\002\000\004\015\174\001\002" +
    "\000\004\017\175\001\002\000\026\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\015\uffee\016\uffee\057\uffee" +
    "\060\uffee\001\002\000\004\010\177\001\002\000\024\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\015\ufffa" +
    "\057\ufffa\060\ufffa\001\002\000\024\004\ufff2\005\uffe6\006" +
    "\ufff2\007\ufff2\011\uffe6\012\uffe6\015\ufff2\057\ufff2\060\ufff2" +
    "\001\002\000\010\005\uffe4\011\204\012\203\001\002\000" +
    "\004\005\211\001\002\000\020\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\015\ufffa\057\ufffa\060\ufffa\001\002\000\030\014" +
    "\036\022\045\034\046\035\053\042\044\052\063\053\043" +
    "\054\054\055\040\056\055\060\041\001\002\000\004\010" +
    "\206\001\002\000\024\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\012\ufffa\015\ufffa\057\ufffa\060\ufffa\001\002\000" +
    "\024\004\ufff2\005\uffe7\006\ufff2\007\ufff2\011\uffe7\012\uffe7" +
    "\015\ufff2\057\ufff2\060\ufff2\001\002\000\020\004\ufff2\005" +
    "\uffe5\006\ufff2\007\ufff2\015\ufff2\057\ufff2\060\ufff2\001\002" +
    "\000\004\007\212\001\002\000\004\017\213\001\002\000" +
    "\026\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef" +
    "\015\uffef\016\uffef\057\uffef\060\uffef\001\002\000\020\004" +
    "\ufff2\005\215\006\ufff2\007\ufff2\015\ufff2\057\ufff2\060\ufff2" +
    "\001\002\000\004\006\216\001\002\000\004\017\217\001" +
    "\002\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\015\ufff0\016\ufff0\057\ufff0\060\ufff0\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\003\023\004\001\001\000\002\001" +
    "\001\000\006\021\005\022\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\010\001\001\000\006\004" +
    "\012\006\011\001\001\000\020\005\027\010\031\011\022" +
    "\012\030\015\017\021\005\022\024\001\001\000\002\001" +
    "\001\000\004\007\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\024\175\025\041\026\046\027\057\030\034\031\050\032" +
    "\055\033\033\034\051\035\056\036\060\037\061\040\036" +
    "\001\001\000\002\001\001\000\040\016\152\017\154\024" +
    "\153\025\041\026\046\027\057\030\034\031\050\032\055" +
    "\033\033\034\051\035\056\036\060\037\061\040\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\024\047\025\041\026\046\027" +
    "\057\030\034\031\050\032\055\033\033\034\051\035\056" +
    "\036\060\037\061\040\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\027\117\030\034\031\050\032\055\033\033" +
    "\034\051\035\056\036\060\037\061\040\036\001\001\000" +
    "\034\024\115\025\041\026\046\027\057\030\034\031\050" +
    "\032\055\033\033\034\051\035\056\036\060\037\061\040" +
    "\036\001\001\000\012\033\114\034\051\035\056\040\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\100\034\051\035\056" +
    "\040\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\034\031\050\032\055\033\033\034\051" +
    "\035\056\037\065\040\036\001\001\000\002\001\001\000" +
    "\022\030\034\031\050\032\055\033\033\034\051\035\056" +
    "\037\067\040\036\001\001\000\002\001\001\000\022\030" +
    "\034\031\050\032\055\033\033\034\051\035\056\037\071" +
    "\040\036\001\001\000\002\001\001\000\022\030\034\031" +
    "\050\032\055\033\033\034\051\035\056\037\073\040\036" +
    "\001\001\000\002\001\001\000\012\033\077\034\051\035" +
    "\056\040\036\001\001\000\012\033\076\034\051\035\056" +
    "\040\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\102\040\036\001\001\000\002" +
    "\001\001\000\014\032\110\033\033\034\051\035\056\040" +
    "\036\001\001\000\014\032\107\033\033\034\051\035\056" +
    "\040\036\001\001\000\014\032\106\033\033\034\051\035" +
    "\056\040\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\027\113\030" +
    "\034\031\050\032\055\033\033\034\051\035\056\036\060" +
    "\037\061\040\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\026\121\027\057\030\034\031\050\032\055\033" +
    "\033\034\051\035\056\036\060\037\061\040\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\024\125\025\041\026\046\027\057\030\034\031\050" +
    "\032\055\033\033\034\051\035\056\036\060\037\061\040" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\146\032\055\033\033\034\051\035\056" +
    "\040\036\001\001\000\016\031\145\032\055\033\033\034" +
    "\051\035\056\040\036\001\001\000\016\031\144\032\055" +
    "\033\033\034\051\035\056\040\036\001\001\000\016\031" +
    "\143\032\055\033\033\034\051\035\056\040\036\001\001" +
    "\000\016\031\142\032\055\033\033\034\051\035\056\040" +
    "\036\001\001\000\016\031\141\032\055\033\033\034\051" +
    "\035\056\040\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\152\017\170" +
    "\001\001\000\006\016\163\020\162\001\001\000\034\024" +
    "\156\025\041\026\046\027\057\030\034\031\050\032\055" +
    "\033\033\034\051\035\056\036\060\037\061\040\036\001" +
    "\001\000\002\001\001\000\006\004\160\006\011\001\001" +
    "\000\002\001\001\000\006\004\167\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\163\020\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\177\001\001\000\010\004\012\006\011\013\200" +
    "\001\001\000\004\014\201\001\001\000\002\001\001\000" +
    "\004\003\207\001\001\000\034\024\204\025\041\026\046" +
    "\027\057\030\034\031\050\032\055\033\033\034\051\035" +
    "\056\036\060\037\061\040\036\001\001\000\002\001\001" +
    "\000\004\003\206\001\001\000\006\004\012\006\011\001" +
    "\001\000\006\004\012\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\012\006" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= plsql_block_list 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Block> b = (List<Block>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // plsql_block_list ::= plsql_block_list plsql_block 
            {
              List<Block> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Block> l = (List<Block>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // plsql_block_list ::= 
            {
              List<Block> RESULT =null;
		 RESULT = new ArrayList<Block>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // plsql_block ::= body 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Block(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_list END closing_label SEMI 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Body(sl, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= label_list statement_inner 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 s.setLabels(l); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement_inner ::= assignment_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignmentStatement s = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_inner ::= loop_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LoopStatement s = (LoopStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_inner ::= if_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_inner ::= case_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement s = (CaseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_inner ::= plsql_block 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // label_list ::= label_list LABEL 
            {
              List<Label> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Label> ls = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ls.add(new Label(l)); RESULT = ls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // label_list ::= 
            {
              List<Label> RESULT =null;
		 RESULT = new ArrayList<Label>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignment_statement ::= IDENTIFIER ASSIGNMENT_OPERATOR expression SEMI 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignmentStatement(id, value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // loop_statement ::= LOOP statement_list END LOOP SEMI 
            {
              LoopStatement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new LoopStatement(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_statement ::= IF expression THEN statement_list elsif_list else_block END IF SEMI 
            {
              IfStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<IfStatement.Elsif> el = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IfStatement.Else alt = (IfStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new IfStatement(cond, sl, el, alt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // case_statement ::= CASE expression case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int selectorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int selectorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression selector = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new CaseStatement(selector, cl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // case_statement ::= CASE case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new CaseStatement(null, cl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // case_when_list ::= case_when_list case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CaseStatement.When> l = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case_when_list ::= case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<CaseStatement.When>(Arrays.asList(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case_when ::= WHEN expression THEN statement 
            {
              CaseStatement.When RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseStatement.When(val, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // case_else ::= ELSE statement 
            {
              CaseStatement.Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseStatement.Else(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // case_else ::= 
            {
              CaseStatement.Else RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elsif_list ::= elsif_list ELSIF expression THEN statement_list 
            {
              List<IfStatement.Elsif> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<IfStatement.Elsif> l = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(new IfStatement.Elsif(cond, sl)); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elsif_list ::= 
            {
              List<IfStatement.Elsif> RESULT =null;
		 RESULT = new ArrayList<IfStatement.Elsif>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else_block ::= ELSE statement_list 
            {
              IfStatement.Else RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement.Else(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // else_block ::= 
            {
              IfStatement.Else RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= boolean_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolean_or_expression ::= boolean_or_expression OR_OPERATOR boolean_and_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolean_or_expression ::= boolean_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_and_expression ::= boolean_and_expression AND_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_and_expression ::= boolean_not_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean_not_expression ::= NOT_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean_not_expression ::= boolean_between_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_between_expression ::= boolean_is_expression BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BetweenExpression(expr, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_between_expression ::= boolean_is_expression NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_between_expression ::= boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_is_expression ::= comparison_expression IS_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_is_expression ::= comparison_expression IS_OPERATOR NOT_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_is_expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparison_expression ::= comparison_expression LESS_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparison_expression ::= comparison_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparison_expression ::= comparison_expression GREATER_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparison_expression ::= comparison_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparison_expression ::= comparison_expression EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparison_expression ::= comparison_expression NOT_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparison_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= additive_expression ADDITION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // additive_expression ::= additive_expression SUBTRACTION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // additive_expression ::= additive_expression CONCATENATION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // multiplicative_expression ::= multiplicative_expression MULTIPLICATION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // multiplicative_expression ::= multiplicative_expression DIVISION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multiplicative_expression ::= unary_numeric_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_numeric_expression ::= ADDITION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_numeric_expression ::= SUBTRACTION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_numeric_expression ::= exponentiation_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exponentiation_expression ::= exponentiation_expression EXPONENTIATION_OPERATOR expression_atom 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exponentiation_expression ::= expression_atom 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cursor ::= NAMED_CURSOR 
            {
              Cursor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NamedCursor(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cursor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cursor ::= IMPLICIT_CURSOR 
            {
              Cursor RESULT =null;
		 RESULT = new ImplicitCursor(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cursor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_atom ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionIdentifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_atom ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_atom ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_atom ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_atom ::= NUMBER_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_atom ::= IDENTIFIER DOT EXISTS_OPERATOR LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier collection = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CollectionExistExpression(collection, index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_atom ::= cursor FOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_atom ::= cursor ISOPEN_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_atom ::= cursor NOTFOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_atom ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // closing_label ::= IDENTIFIER 
            {
              Label RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier l = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Label(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closing_label",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // closing_label ::= 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closing_label",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
