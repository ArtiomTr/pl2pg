
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.oracle.main.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.example.oracle.ast.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PlSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\027" +
    "\004\000\002\027\002\000\002\026\004\000\002\021\007" +
    "\000\002\003\004\000\002\003\002\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\004\000\002\006" +
    "\002\000\002\010\006\000\002\011\007\000\002\012\013" +
    "\000\002\015\011\000\002\015\010\000\002\017\004\000" +
    "\002\017\003\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\013\007\000\002\013\002\000\002\014" +
    "\004\000\002\014\002\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\032\005\000\002\032\003\000" +
    "\002\033\004\000\002\033\003\000\002\042\007\000\002" +
    "\042\010\000\002\042\003\000\002\043\005\000\002\043" +
    "\006\000\002\043\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\003\000\002\037\004" +
    "\000\002\037\004\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\022\004\000\002\022\002\000\002" +
    "\023\004\000\002\023\003\000\002\024\007\000\002\024" +
    "\011\000\002\024\005\000\002\024\010\000\002\051\003" +
    "\000\002\051\005\000\002\051\006\000\002\051\005\000" +
    "\002\051\002\000\002\045\006\000\002\045\011\000\002" +
    "\045\011\000\002\045\007\000\002\045\004\000\002\045" +
    "\006\000\002\045\007\000\002\045\007\000\002\054\003" +
    "\000\002\054\002\000\002\025\004\000\002\025\002\000" +
    "\002\052\003\000\002\052\003\000\002\052\004\000\002" +
    "\046\003\000\002\046\004\000\002\046\003\000\002\046" +
    "\003\000\002\050\003\000\002\050\006\000\002\050\010" +
    "\000\002\047\002\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\057\004\000\002\057\006\000\002" +
    "\060\004\000\002\055\005\000\002\055\003\000\002\056" +
    "\004\000\002\056\007\000\002\053\003\000\002\053\003" +
    "\000\002\044\003\000\002\044\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\010\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\005\000\002\007\003" +
    "\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\010\002\ufffe\004\ufffe\022\ufffe\001\002\000" +
    "\004\002\360\001\002\000\010\002\000\004\uffc2\022\010" +
    "\001\002\000\004\004\265\001\002\000\010\002\uffff\004" +
    "\uffff\022\uffff\001\002\000\010\017\015\020\013\104\012" +
    "\001\002\000\012\004\uffc3\017\015\020\013\104\012\001" +
    "\002\000\006\032\040\104\043\001\002\000\004\104\234" +
    "\001\002\000\012\004\uffc0\017\uffc0\020\uffc0\104\uffc0\001" +
    "\002\000\004\104\016\001\002\000\004\067\017\001\002" +
    "\000\016\025\023\031\020\032\022\034\021\035\025\036" +
    "\027\001\002\000\004\043\101\001\002\000\004\043\uffaa" +
    "\001\002\000\004\033\074\001\002\000\004\026\063\001" +
    "\002\000\004\043\032\001\002\000\004\036\031\001\002" +
    "\000\004\040\030\001\002\000\004\043\uffa9\001\002\000" +
    "\012\004\uffbf\017\uffbf\020\uffbf\104\uffbf\001\002\000\004" +
    "\043\uffa8\001\002\000\004\100\033\001\002\000\004\044" +
    "\034\001\002\000\004\026\035\001\002\000\006\032\040" +
    "\104\043\001\002\000\020\027\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\044\uffa5\045\uffa5\063\uffa5\001\002\000\020\027\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\044\uffa4\045\uffa4\063\uffa4\001" +
    "\002\000\004\104\062\001\002\000\006\040\uffab\063\057" +
    "\001\002\000\020\027\uffa7\037\uffa7\040\uffa7\041\uffa7\044" +
    "\uffa7\045\uffa7\063\uffa7\001\002\000\030\027\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\047\043\044\044\uffa3\045\uffa3\063" +
    "\uffa3\074\045\075\046\001\002\000\004\100\052\001\002" +
    "\000\020\027\uff9a\037\uff9a\040\uff9a\041\uff9a\044\uff9a\045" +
    "\uff9a\063\uff9a\001\002\000\020\027\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\044\uff9c\045\uff9c\063\uff9c\001\002\000\004\104" +
    "\050\001\002\000\004\075\051\001\002\000\020\027\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\044\uff9b\045\uff9b\063\uff9b\001" +
    "\002\000\006\041\053\044\054\001\002\000\004\100\055" +
    "\001\002\000\026\021\uffa2\023\uffa2\027\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\044\uffa2\045\uffa2\063\uffa2\100\uffa2\001\002" +
    "\000\004\044\056\001\002\000\026\021\uffa1\023\uffa1\027" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\044\uffa1\045\uffa1\063\uffa1" +
    "\100\uffa1\001\002\000\004\076\061\001\002\000\004\040" +
    "\uffb4\001\002\000\012\027\uffac\037\uffac\040\uffac\045\uffac" +
    "\001\002\000\020\027\uffa6\037\uffa6\040\uffa6\041\uffa6\044" +
    "\uffa6\045\uffa6\063\uffa6\001\002\000\006\032\040\104\043" +
    "\001\002\000\010\027\uffab\040\uffab\063\057\001\002\000" +
    "\006\027\066\040\uffb6\001\002\000\004\030\067\001\002" +
    "\000\006\040\uffa0\104\043\001\002\000\004\040\uff9e\001" +
    "\002\000\004\040\uffb5\001\002\000\004\040\uff9d\001\002" +
    "\000\004\040\uff9f\001\002\000\006\013\075\040\uffb2\001" +
    "\002\000\004\104\076\001\002\000\010\040\uffb1\074\077" +
    "\075\100\001\002\000\004\040\uffb0\001\002\000\004\040" +
    "\uffaf\001\002\000\004\104\103\001\002\000\006\041\230" +
    "\044\uffad\001\002\000\006\032\040\104\043\001\002\000" +
    "\006\041\uff98\044\uff98\001\002\000\014\037\uffab\041\uff97" +
    "\044\uff97\045\uffab\063\057\001\002\000\006\037\107\045" +
    "\111\001\002\000\030\014\uff95\043\uff95\055\uff95\056\uff95" +
    "\063\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95\104" +
    "\uff95\001\002\000\030\014\115\043\123\055\124\056\131" +
    "\063\121\076\141\077\122\100\132\101\116\102\133\104" +
    "\117\001\002\000\030\014\uff94\043\uff94\055\uff94\056\uff94" +
    "\063\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\104" +
    "\uff94\001\002\000\054\010\uffc9\016\uffc9\040\uffc9\041\uffc9" +
    "\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\066\uffc9\067\uffc9\001\002\000\042\010" +
    "\uffd7\016\uffd7\040\uffd7\041\uffd7\044\uffd7\046\214\047\212" +
    "\050\215\051\216\052\211\053\213\061\uffd7\062\uffd7\063" +
    "\uffd7\066\uffd7\067\210\001\002\000\010\070\207\071\206" +
    "\072\205\001\002\000\010\070\uff92\071\uff92\072\uff92\001" +
    "\002\000\056\010\uff90\016\uff90\040\uff90\041\uff90\044\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\064\uff90\066\uff90\067\uff90\001\002\000\060\010" +
    "\uff91\016\uff91\040\uff91\041\uff91\042\200\044\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\066\uff91\067\uff91\001\002\000\016\010\uffe3\016" +
    "\uffe3\040\uffe3\041\uffe3\044\uffe3\062\176\001\002\000\030" +
    "\014\115\043\123\055\124\056\131\063\121\076\141\077" +
    "\122\100\132\101\116\102\133\104\117\001\002\000\056" +
    "\010\uff8e\016\uff8e\040\uff8e\041\uff8e\044\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\066\uff8e\067\uff8e\001\002\000\030\014\115\043\123" +
    "\055\124\056\131\063\121\076\141\077\122\100\132\101" +
    "\116\102\133\104\117\001\002\000\026\014\115\043\123" +
    "\055\124\056\131\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\020\010\uffe1\016\uffe1\040\uffe1" +
    "\041\uffe1\044\uffe1\061\170\062\uffe1\001\002\000\006\041" +
    "\uff96\044\uff96\001\002\000\050\010\uffd0\016\uffd0\040\uffd0" +
    "\041\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\163\055\164\056\162\061\uffd0\062\uffd0" +
    "\063\uffd0\066\uffd0\067\uffd0\001\002\000\056\010\uffc6\016" +
    "\uffc6\040\uffc6\041\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\160\066\uffc6" +
    "\067\uffc6\001\002\000\026\014\115\043\123\055\124\056" +
    "\131\076\141\077\122\100\132\101\116\102\133\104\117" +
    "\001\002\000\056\010\uff8d\016\uff8d\040\uff8d\041\uff8d\044" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\066\uff8d\067\uff8d\001\002\000\010" +
    "\070\uff93\071\uff93\072\uff93\001\002\000\054\010\uffcc\016" +
    "\uffcc\040\uffcc\041\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\154\060\153\061\uffcc\062\uffcc\063\uffcc\066\uffcc\067\uffcc" +
    "\001\002\000\056\010\uffc4\016\uffc4\040\uffc4\041\uffc4\044" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\066\uffc4\067\uffc4\001\002\000\020" +
    "\010\uffdf\016\uffdf\040\uffdf\041\uffdf\044\uffdf\061\uffdf\062" +
    "\uffdf\001\002\000\020\010\uffdd\016\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\061\uffdd\062\uffdd\001\002\000\024\010\uffda\016" +
    "\uffda\040\uffda\041\uffda\044\uffda\061\uffda\062\uffda\063\142" +
    "\066\143\001\002\000\056\010\uff8f\016\uff8f\040\uff8f\041" +
    "\uff8f\044\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f\067\uff8f\001\002" +
    "\000\004\066\147\001\002\000\026\014\115\043\123\055" +
    "\124\056\131\076\141\077\122\100\132\101\116\102\133" +
    "\104\117\001\002\000\004\061\145\001\002\000\026\014" +
    "\115\043\123\055\124\056\131\076\141\077\122\100\132" +
    "\101\116\102\133\104\117\001\002\000\020\010\uffdc\016" +
    "\uffdc\040\uffdc\041\uffdc\044\uffdc\061\uffdc\062\uffdc\001\002" +
    "\000\026\014\115\043\123\055\124\056\131\076\141\077" +
    "\122\100\132\101\116\102\133\104\117\001\002\000\004" +
    "\061\151\001\002\000\026\014\115\043\123\055\124\056" +
    "\131\076\141\077\122\100\132\101\116\102\133\104\117" +
    "\001\002\000\020\010\uffdb\016\uffdb\040\uffdb\041\uffdb\044" +
    "\uffdb\061\uffdb\062\uffdb\001\002\000\026\014\115\043\123" +
    "\055\124\056\131\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\026\014\115\043\123\055\124" +
    "\056\131\076\141\077\122\100\132\101\116\102\133\104" +
    "\117\001\002\000\054\010\uffcb\016\uffcb\040\uffcb\041\uffcb" +
    "\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\066\uffcb\067\uffcb\001\002\000\054\010" +
    "\uffca\016\uffca\040\uffca\041\uffca\044\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\066\uffca" +
    "\067\uffca\001\002\000\054\010\uffc7\016\uffc7\040\uffc7\041" +
    "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\066\uffc7\067\uffc7\001\002\000\022" +
    "\014\115\043\123\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\056\010\uffc5\016\uffc5\040\uffc5" +
    "\041\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\067\uffc5\001" +
    "\002\000\026\014\115\043\123\055\124\056\131\076\141" +
    "\077\122\100\132\101\116\102\133\104\117\001\002\000" +
    "\026\014\115\043\123\055\124\056\131\076\141\077\122" +
    "\100\132\101\116\102\133\104\117\001\002\000\026\014" +
    "\115\043\123\055\124\056\131\076\141\077\122\100\132" +
    "\101\116\102\133\104\117\001\002\000\054\010\uffcf\016" +
    "\uffcf\040\uffcf\041\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\154\060\153\061\uffcf\062\uffcf\063\uffcf\066\uffcf\067\uffcf" +
    "\001\002\000\054\010\uffcd\016\uffcd\040\uffcd\041\uffcd\044" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\154\060\153\061\uffcd\062" +
    "\uffcd\063\uffcd\066\uffcd\067\uffcd\001\002\000\054\010\uffce" +
    "\016\uffce\040\uffce\041\uffce\044\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\154\060\153\061\uffce\062\uffce\063\uffce\066\uffce\067" +
    "\uffce\001\002\000\030\014\115\043\123\055\124\056\131" +
    "\063\121\076\141\077\122\100\132\101\116\102\133\104" +
    "\117\001\002\000\020\010\uffe0\016\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\061\uffe0\062\uffe0\001\002\000\054\010\uffc8\016" +
    "\uffc8\040\uffc8\041\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\004\044\174\001\002\000\056\010\uff88\016" +
    "\uff88\040\uff88\041\uff88\044\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\066\uff88" +
    "\067\uff88\001\002\000\020\010\uffde\016\uffde\040\uffde\041" +
    "\uffde\044\uffde\061\uffde\062\uffde\001\002\000\030\014\115" +
    "\043\123\055\124\056\131\063\121\076\141\077\122\100" +
    "\132\101\116\102\133\104\117\001\002\000\020\010\uffe2" +
    "\016\uffe2\040\uffe2\041\uffe2\044\uffe2\061\170\062\uffe2\001" +
    "\002\000\004\065\201\001\002\000\004\043\202\001\002" +
    "\000\030\014\115\043\123\055\124\056\131\063\121\076" +
    "\141\077\122\100\132\101\116\102\133\104\117\001\002" +
    "\000\004\044\204\001\002\000\056\010\uff8c\016\uff8c\040" +
    "\uff8c\041\uff8c\044\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\067\uff8c" +
    "\001\002\000\056\010\uff89\016\uff89\040\uff89\041\uff89\044" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\066\uff89\067\uff89\001\002\000\056" +
    "\010\uff8a\016\uff8a\040\uff8a\041\uff8a\044\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\066\uff8a\067\uff8a\001\002\000\056\010\uff8b\016\uff8b" +
    "\040\uff8b\041\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\066\uff8b\067" +
    "\uff8b\001\002\000\006\063\225\076\226\001\002\000\026" +
    "\014\115\043\123\055\124\056\131\076\141\077\122\100" +
    "\132\101\116\102\133\104\117\001\002\000\026\014\115" +
    "\043\123\055\124\056\131\076\141\077\122\100\132\101" +
    "\116\102\133\104\117\001\002\000\026\014\115\043\123" +
    "\055\124\056\131\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\026\014\115\043\123\055\124" +
    "\056\131\076\141\077\122\100\132\101\116\102\133\104" +
    "\117\001\002\000\026\014\115\043\123\055\124\056\131" +
    "\076\141\077\122\100\132\101\116\102\133\104\117\001" +
    "\002\000\026\014\115\043\123\055\124\056\131\076\141" +
    "\077\122\100\132\101\116\102\133\104\117\001\002\000" +
    "\050\010\uffd4\016\uffd4\040\uffd4\041\uffd4\044\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\163\055" +
    "\164\056\162\061\uffd4\062\uffd4\063\uffd4\066\uffd4\067\uffd4" +
    "\001\002\000\050\010\uffd6\016\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\163\055\164\056\162\061\uffd6\062\uffd6\063\uffd6\066" +
    "\uffd6\067\uffd6\001\002\000\050\010\uffd2\016\uffd2\040\uffd2" +
    "\041\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\163\055\164\056\162\061\uffd2\062\uffd2" +
    "\063\uffd2\066\uffd2\067\uffd2\001\002\000\050\010\uffd3\016" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\163\055\164\056\162\061" +
    "\uffd3\062\uffd3\063\uffd3\066\uffd3\067\uffd3\001\002\000\050" +
    "\010\uffd1\016\uffd1\040\uffd1\041\uffd1\044\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\163\055\164" +
    "\056\162\061\uffd1\062\uffd1\063\uffd1\066\uffd1\067\uffd1\001" +
    "\002\000\050\010\uffd5\016\uffd5\040\uffd5\041\uffd5\044\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\163\055\164\056\162\061\uffd5\062\uffd5\063\uffd5\066\uffd5" +
    "\067\uffd5\001\002\000\004\076\227\001\002\000\024\010" +
    "\uffd9\016\uffd9\040\uffd9\041\uffd9\044\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\066\uffd9\001\002\000\024\010\uffd8\016\uffd8\040" +
    "\uffd8\041\uffd8\044\uffd8\061\uffd8\062\uffd8\063\uffd8\066\uffd8" +
    "\001\002\000\006\044\uffae\104\103\001\002\000\004\044" +
    "\232\001\002\000\004\040\uffb3\001\002\000\006\041\uff99" +
    "\044\uff99\001\002\000\004\067\235\001\002\000\004\104" +
    "\237\001\002\000\014\021\240\023\242\040\uffb7\063\uffb7" +
    "\100\241\001\002\000\016\021\uffa3\023\uffa3\040\uffa3\043" +
    "\044\063\uffa3\100\uffa3\001\002\000\004\100\252\001\002" +
    "\000\010\040\uffbb\041\250\063\uffbb\001\002\000\004\024" +
    "\246\001\002\000\006\040\uffab\063\057\001\002\000\004" +
    "\040\245\001\002\000\012\004\uffbe\017\uffbe\020\uffbe\104" +
    "\uffbe\001\002\000\004\077\247\001\002\000\006\040\uffb8" +
    "\063\uffb8\001\002\000\004\100\251\001\002\000\006\040" +
    "\uffba\063\uffba\001\002\000\004\073\253\001\002\000\004" +
    "\100\254\001\002\000\006\040\uffb9\063\uffb9\001\002\000" +
    "\012\037\uffab\040\256\045\uffab\063\057\001\002\000\012" +
    "\004\uffbd\017\uffbd\020\uffbd\104\uffbd\001\002\000\006\037" +
    "\107\045\111\001\002\000\030\014\115\043\123\055\124" +
    "\056\131\063\121\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\004\040\262\001\002\000\012" +
    "\004\uffbc\017\uffbc\020\uffbc\104\uffbc\001\002\000\012\004" +
    "\uffc1\017\uffc1\020\uffc1\104\uffc1\001\002\000\032\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\015" +
    "\ufffd\016\ufffd\022\ufffd\103\ufffd\104\ufffd\001\002\000\022" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\022\ufffa\103" +
    "\ufffa\104\ufffa\001\002\000\022\004\ufff2\005\271\006\ufff2" +
    "\007\ufff2\015\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000" +
    "\020\004\uffc2\006\276\007\301\015\303\022\010\103\277" +
    "\104\304\001\002\000\026\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\022\ufffb\103\ufffb\104\ufffb" +
    "\001\002\000\006\040\uff86\104\273\001\002\000\004\040" +
    "\274\001\002\000\004\040\uff87\001\002\000\032\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\015" +
    "\ufffc\016\ufffc\022\ufffc\103\ufffc\104\ufffc\001\002\000\030" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\015" +
    "\ufff5\016\ufff5\022\ufff5\103\ufff5\104\ufff5\001\002\000\022" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\022\ufffa\103" +
    "\ufffa\104\ufffa\001\002\000\020\004\ufff3\006\ufff3\007\ufff3" +
    "\015\ufff3\022\ufff3\103\ufff3\104\ufff3\001\002\000\030\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\022\ufff7\103\ufff7\104\ufff7\001\002\000\030\014" +
    "\115\043\123\055\124\056\131\063\121\076\141\077\122" +
    "\100\132\101\116\102\133\104\117\001\002\000\030\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\015\ufff4" +
    "\016\ufff4\022\ufff4\103\ufff4\104\ufff4\001\002\000\032\014" +
    "\115\016\316\043\123\055\124\056\131\063\121\076\141" +
    "\077\122\100\132\101\116\102\133\104\117\001\002\000" +
    "\004\045\310\001\002\000\030\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\022\ufff9\103" +
    "\ufff9\104\ufff9\001\002\000\030\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\022\ufff6\103" +
    "\ufff6\104\ufff6\001\002\000\030\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\022\ufff8\103" +
    "\ufff8\104\ufff8\001\002\000\030\014\115\043\123\055\124" +
    "\056\131\063\121\076\141\077\122\100\132\101\116\102" +
    "\133\104\117\001\002\000\004\040\312\001\002\000\030" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\015" +
    "\ufff1\016\ufff1\022\ufff1\103\ufff1\104\ufff1\001\002\000\010" +
    "\005\uffeb\012\uffeb\016\uffeb\001\002\000\004\016\316\001" +
    "\002\000\010\005\uffe8\012\322\016\316\001\002\000\030" +
    "\014\115\043\123\055\124\056\131\063\121\076\141\077" +
    "\122\100\132\101\116\102\133\104\117\001\002\000\004" +
    "\010\320\001\002\000\020\004\ufff2\006\ufff2\007\ufff2\015" +
    "\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000\010\005\uffea" +
    "\012\uffea\016\uffea\001\002\000\020\004\ufff2\006\ufff2\007" +
    "\ufff2\015\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000\004" +
    "\005\325\001\002\000\010\005\uffec\012\uffec\016\uffec\001" +
    "\002\000\004\015\326\001\002\000\004\040\327\001\002" +
    "\000\030\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012" +
    "\uffed\015\uffed\016\uffed\022\uffed\103\uffed\104\uffed\001\002" +
    "\000\004\005\uffe9\001\002\000\010\005\uffe8\012\322\016" +
    "\316\001\002\000\004\005\333\001\002\000\004\015\334" +
    "\001\002\000\004\040\335\001\002\000\030\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\011\uffee\012\uffee\015\uffee\016\uffee" +
    "\022\uffee\103\uffee\104\uffee\001\002\000\004\010\337\001" +
    "\002\000\026\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\015\ufffa\022\ufffa\103\ufffa\104\ufffa\001\002\000" +
    "\026\004\ufff2\005\uffe6\006\ufff2\007\ufff2\011\uffe6\012\uffe6" +
    "\015\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000\010\005" +
    "\uffe4\011\344\012\343\001\002\000\004\005\351\001\002" +
    "\000\022\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\022" +
    "\ufffa\103\ufffa\104\ufffa\001\002\000\030\014\115\043\123" +
    "\055\124\056\131\063\121\076\141\077\122\100\132\101" +
    "\116\102\133\104\117\001\002\000\004\010\346\001\002" +
    "\000\026\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\022\ufffa\103\ufffa\104\ufffa\001\002\000\026" +
    "\004\ufff2\005\uffe7\006\ufff2\007\ufff2\011\uffe7\012\uffe7\015" +
    "\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000\022\004\ufff2" +
    "\005\uffe5\006\ufff2\007\ufff2\015\ufff2\022\ufff2\103\ufff2\104" +
    "\ufff2\001\002\000\004\007\352\001\002\000\004\040\353" +
    "\001\002\000\030\004\uffef\005\uffef\006\uffef\007\uffef\011" +
    "\uffef\012\uffef\015\uffef\016\uffef\022\uffef\103\uffef\104\uffef" +
    "\001\002\000\022\004\ufff2\005\355\006\ufff2\007\ufff2\015" +
    "\ufff2\022\ufff2\103\ufff2\104\ufff2\001\002\000\004\006\356" +
    "\001\002\000\004\040\357\001\002\000\030\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\022\ufff0\103\ufff0\104\ufff0\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\002\003\027\004\001\001\000\002\001" +
    "\001\000\006\022\005\026\006\001\001\000\004\021\263" +
    "\001\001\000\002\001\001\000\006\023\010\024\013\001" +
    "\001\000\004\024\262\001\001\000\012\046\254\050\041" +
    "\057\035\060\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\025" +
    "\052\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\040\050\041\057\035\060" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\063\050\041\057\035\060\036\001\001\000\004\025" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\070\050\072\057\067\060\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\101\056\103" +
    "\001\001\000\004\054\230\001\001\000\012\046\104\050" +
    "\041\057\035\060\036\001\001\000\002\001\001\000\004" +
    "\025\105\001\001\000\004\053\107\001\001\000\002\001" +
    "\001\000\034\030\125\031\117\032\124\033\135\034\112" +
    "\035\126\036\133\037\111\040\127\041\134\042\136\043" +
    "\137\044\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\033\174\034\112\035\126\036\133\037\111\040\127\041" +
    "\134\042\136\043\137\044\113\001\001\000\002\001\001" +
    "\000\034\030\172\031\117\032\124\033\135\034\112\035" +
    "\126\036\133\037\111\040\127\041\134\042\136\043\137" +
    "\044\113\001\001\000\012\037\171\040\127\041\134\044" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\156\040\127\041" +
    "\134\044\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\034\112\035\126\036\133\037\111\040" +
    "\127\041\134\043\143\044\113\001\001\000\002\001\001" +
    "\000\022\034\112\035\126\036\133\037\111\040\127\041" +
    "\134\043\145\044\113\001\001\000\002\001\001\000\022" +
    "\034\112\035\126\036\133\037\111\040\127\041\134\043" +
    "\147\044\113\001\001\000\002\001\001\000\022\034\112" +
    "\035\126\036\133\037\111\040\127\041\134\043\151\044" +
    "\113\001\001\000\002\001\001\000\012\037\155\040\127" +
    "\041\134\044\113\001\001\000\012\037\154\040\127\041" +
    "\134\044\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\160\044\113\001\001\000" +
    "\002\001\001\000\014\036\166\037\111\040\127\041\134" +
    "\044\113\001\001\000\014\036\165\037\111\040\127\041" +
    "\134\044\113\001\001\000\014\036\164\037\111\040\127" +
    "\041\134\044\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\033\170\034\112\035\126" +
    "\036\133\037\111\040\127\041\134\042\136\043\137\044" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\032" +
    "\176\033\135\034\112\035\126\036\133\037\111\040\127" +
    "\041\134\042\136\043\137\044\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\030\202" +
    "\031\117\032\124\033\135\034\112\035\126\036\133\037" +
    "\111\040\127\041\134\042\136\043\137\044\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\223\036\133\037\111\040\127\041\134\044\113\001" +
    "\001\000\016\035\222\036\133\037\111\040\127\041\134" +
    "\044\113\001\001\000\016\035\221\036\133\037\111\040" +
    "\127\041\134\044\113\001\001\000\016\035\220\036\133" +
    "\037\111\040\127\041\134\044\113\001\001\000\016\035" +
    "\217\036\133\037\111\040\127\041\134\044\113\001\001" +
    "\000\016\035\216\036\133\037\111\040\127\041\134\044" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\235" +
    "\001\001\000\004\051\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\256\001\001\000\002\001\001\000\004" +
    "\053\257\001\001\000\034\030\260\031\117\032\124\033" +
    "\135\034\112\035\126\036\133\037\111\040\127\041\134" +
    "\042\136\043\137\044\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\265\001\001\000\006\004\267\006\266\001\001\000" +
    "\020\005\304\010\306\011\277\012\305\015\274\022\005" +
    "\026\301\001\001\000\002\001\001\000\004\007\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\030\335\031\117\032\124" +
    "\033\135\034\112\035\126\036\133\037\111\040\127\041" +
    "\134\042\136\043\137\044\113\001\001\000\002\001\001" +
    "\000\040\016\312\017\314\030\313\031\117\032\124\033" +
    "\135\034\112\035\126\036\133\037\111\040\127\041\134" +
    "\042\136\043\137\044\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\030\310\031\117\032\124\033\135\034\112\035\126\036" +
    "\133\037\111\040\127\041\134\042\136\043\137\044\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\312\017\330\001\001\000\006\016\323" +
    "\020\322\001\001\000\034\030\316\031\117\032\124\033" +
    "\135\034\112\035\126\036\133\037\111\040\127\041\134" +
    "\042\136\043\137\044\113\001\001\000\002\001\001\000" +
    "\006\004\320\006\266\001\001\000\002\001\001\000\006" +
    "\004\327\006\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\323\020\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\337\001\001\000" +
    "\010\004\267\006\266\013\340\001\001\000\004\014\341" +
    "\001\001\000\002\001\001\000\004\003\347\001\001\000" +
    "\034\030\344\031\117\032\124\033\135\034\112\035\126" +
    "\036\133\037\111\040\127\041\134\042\136\043\137\044" +
    "\113\001\001\000\002\001\001\000\004\003\346\001\001" +
    "\000\006\004\267\006\266\001\001\000\006\004\267\006" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\267\006\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TypeToken optionalNonNullable(TypeToken t, Boolean nonNullable) {
        if (nonNullable) {
            return new NonNullTypeToken(t);
        } else {
            return t;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= plsql_block_list 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Block> b = (List<Block>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // plsql_block_list ::= plsql_block_list plsql_block 
            {
              List<Block> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Block> l = (List<Block>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // plsql_block_list ::= 
            {
              List<Block> RESULT =null;
		 RESULT = new ArrayList<Block>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // plsql_block ::= declare_section body 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclareSection d = (DeclareSection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Block(b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plsql_block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_list END closing_label SEMI 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Body(sl, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= label_list statement_inner 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 s.setLabels(l); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement_inner ::= assignment_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignmentStatement s = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_inner ::= loop_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LoopStatement s = (LoopStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_inner ::= if_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_inner ::= case_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement s = (CaseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_inner ::= plsql_block 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_inner",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // label_list ::= label_list LABEL 
            {
              List<Label> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Label> ls = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ls.add(new Label(l)); RESULT = ls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // label_list ::= 
            {
              List<Label> RESULT =null;
		 RESULT = new ArrayList<Label>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignment_statement ::= IDENTIFIER ASSIGNMENT_OPERATOR expression SEMI 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignmentStatement(id, value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // loop_statement ::= LOOP statement_list END LOOP SEMI 
            {
              LoopStatement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new LoopStatement(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_statement ::= IF expression THEN statement_list elsif_list else_block END IF SEMI 
            {
              IfStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<IfStatement.Elsif> el = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IfStatement.Else alt = (IfStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new IfStatement(cond, sl, el, alt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // case_statement ::= CASE expression case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int selectorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int selectorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression selector = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new CaseStatement(selector, cl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // case_statement ::= CASE case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new CaseStatement(null, cl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // case_when_list ::= case_when_list case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CaseStatement.When> l = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case_when_list ::= case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<CaseStatement.When>(Arrays.asList(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case_when ::= WHEN expression THEN statement 
            {
              CaseStatement.When RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseStatement.When(val, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_when",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // case_else ::= ELSE statement 
            {
              CaseStatement.Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseStatement.Else(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // case_else ::= 
            {
              CaseStatement.Else RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elsif_list ::= elsif_list ELSIF expression THEN statement_list 
            {
              List<IfStatement.Elsif> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<IfStatement.Elsif> l = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(new IfStatement.Elsif(cond, sl)); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elsif_list ::= 
            {
              List<IfStatement.Elsif> RESULT =null;
		 RESULT = new ArrayList<IfStatement.Elsif>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else_block ::= ELSE statement_list 
            {
              IfStatement.Else RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement.Else(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // else_block ::= 
            {
              IfStatement.Else RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= boolean_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolean_or_expression ::= boolean_or_expression OR_OPERATOR boolean_and_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolean_or_expression ::= boolean_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_and_expression ::= boolean_and_expression AND_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_and_expression ::= boolean_not_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean_not_expression ::= NOT_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean_not_expression ::= boolean_between_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_between_expression ::= boolean_is_expression BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BetweenExpression(expr, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_between_expression ::= boolean_is_expression NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_between_expression ::= boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_is_expression ::= comparison_expression IS_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_is_expression ::= comparison_expression IS_OPERATOR NOT_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_is_expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparison_expression ::= comparison_expression LESS_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparison_expression ::= comparison_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparison_expression ::= comparison_expression GREATER_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparison_expression ::= comparison_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparison_expression ::= comparison_expression EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparison_expression ::= comparison_expression NOT_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparison_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= additive_expression ADDITION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // additive_expression ::= additive_expression SUBTRACTION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // additive_expression ::= additive_expression CONCATENATION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // multiplicative_expression ::= multiplicative_expression MULTIPLICATION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // multiplicative_expression ::= multiplicative_expression DIVISION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multiplicative_expression ::= unary_numeric_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_numeric_expression ::= ADDITION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_numeric_expression ::= SUBTRACTION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_numeric_expression ::= exponentiation_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exponentiation_expression ::= exponentiation_expression EXPONENTIATION_OPERATOR expression_atom 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exponentiation_expression ::= expression_atom 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declare_section ::= DECLARE declare_item_list 
            {
              DeclareSection RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclareSection(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_section",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declare_section ::= 
            {
              DeclareSection RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_section",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declare_item_list ::= declare_item_list declaration_item 
            {
              List<Declaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration i = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_item_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declare_item_list ::= declaration_item 
            {
              List<Declaration> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration i = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Declaration>(Arrays.asList(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_item_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration_item ::= TYPE IDENTIFIER IS_OPERATOR type_def SEMI 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDefinition(i, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_item",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration_item ::= SUBTYPE IDENTIFIER IS_OPERATOR type constraint opt_not_null SEMI 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeToken b = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SubtypeDefinition.Constraint c = (SubtypeDefinition.Constraint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubtypeDefinition(i, optionalNonNullable(b, n), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_item",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration_item ::= IDENTIFIER datatype SEMI 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VariableDeclaration(i, dt, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_item",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaration_item ::= IDENTIFIER datatype opt_not_null initial_value_operator expression SEMI 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VariableDeclaration(i, optionalNonNullable(dt, n), value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_item",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constraint ::= NUMBER_LITERAL 
            {
              SubtypeDefinition.Constraint RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String precision = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtypeDefinition.PrecisionConstraint(new NumberLiteral(precision), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constraint ::= NUMBER_LITERAL COMMA NUMBER_LITERAL 
            {
              SubtypeDefinition.Constraint RESULT =null;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String precision = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String scale = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtypeDefinition.PrecisionConstraint(new NumberLiteral(precision), new NumberLiteral(scale)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constraint ::= RANGE NUMBER_LITERAL RANGE_OPERATOR NUMBER_LITERAL 
            {
              SubtypeDefinition.Constraint RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtypeDefinition.RangeConstraint(new NumberLiteral(l), new NumberLiteral(h)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constraint ::= CHARACTER SET STRING_LITERAL 
            {
              SubtypeDefinition.Constraint RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtypeDefinition.CharacterSetConstraint(new StringLiteral(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constraint ::= 
            {
              SubtypeDefinition.Constraint RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_def ::= TABLE OF datatype opt_not_null 
            {
              TypeToken RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedTableTypeToken(optionalNonNullable(dt, n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type_def ::= TABLE OF datatype opt_not_null INDEX BY index_type 
            {
              TypeToken RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssocArrayTypeToken(optionalNonNullable(dt, n), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type_def ::= varr LEFT_PARENTHESIS NUMBER_LITERAL RIGHT_PARENTHESIS OF datatype opt_not_null 
            {
              TypeToken RESULT =null;
		int limitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String limit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VaryingArrayTypeToken(new NumberLiteral(limit), optionalNonNullable(dt, n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_def ::= RECORD LEFT_PARENTHESIS record_field_definition_list opt_comma RIGHT_PARENTHESIS 
            {
              TypeToken RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<RecordTypeToken.FieldDefinition> l = (List<RecordTypeToken.FieldDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new RecordTypeToken(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_def ::= REF CURSOR 
            {
              TypeToken RESULT =null;
		 RESULT = new RefCursorTypeToken(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_def ::= REF CURSOR RETURN IDENTIFIER 
            {
              TypeToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RefCursorTypeToken(new TypeReference(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_def ::= REF CURSOR RETURN IDENTIFIER ROWTYPE_ATTRIBUTE_OPERATOR 
            {
              TypeToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RefCursorTypeToken(new RowTypeAttribute(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_def ::= REF CURSOR RETURN IDENTIFIER TYPE_ATTRIBUTE_OPERATOR 
            {
              TypeToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RefCursorTypeToken(new TypeAttribute(i, null)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opt_comma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_comma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opt_comma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_comma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opt_not_null ::= NOT_OPERATOR NULL_LITERAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_not_null",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opt_not_null ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_not_null",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varr ::= VARRAY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // varr ::= ARRAY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // varr ::= VARYING ARRAY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // datatype ::= type 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datatype",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // datatype ::= REF IDENTIFIER 
            {
              TypeToken RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier ot = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeReferenceOperator(ot); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datatype",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datatype ::= type_attribute 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeAttribute t = (TypeAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datatype",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datatype ::= rowtype_attribute 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RowTypeAttribute t = (RowTypeAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datatype",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type ::= IDENTIFIER 
            {
              TypeToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeReference(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type ::= IDENTIFIER LEFT_PARENTHESIS NUMBER_LITERAL RIGHT_PARENTHESIS 
            {
              TypeToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int szleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int szright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sz = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeReference(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= IDENTIFIER LEFT_PARENTHESIS NUMBER_LITERAL COMMA NUMBER_LITERAL RIGHT_PARENTHESIS 
            {
              TypeToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String precision = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String scale = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeReference(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // index_type ::= 
            {
              TypeToken RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // index_type ::= type 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // index_type ::= type_attribute 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeAttribute t = (TypeAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // index_type ::= rowtype_attribute 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RowTypeAttribute t = (RowTypeAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type_attribute ::= IDENTIFIER TYPE_ATTRIBUTE_OPERATOR 
            {
              TypeAttribute RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeAttribute(id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_attribute",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_attribute ::= IDENTIFIER DOT IDENTIFIER TYPE_ATTRIBUTE_OPERATOR 
            {
              TypeAttribute RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier f = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeAttribute(id, f);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_attribute",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // rowtype_attribute ::= IDENTIFIER ROWTYPE_ATTRIBUTE_OPERATOR 
            {
              RowTypeAttribute RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RowTypeAttribute(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rowtype_attribute",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // record_field_definition_list ::= record_field_definition_list COMMA record_field_definition 
            {
              List<RecordTypeToken.FieldDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<RecordTypeToken.FieldDefinition> l = (List<RecordTypeToken.FieldDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordTypeToken.FieldDefinition d = (RecordTypeToken.FieldDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(d); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field_definition_list",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // record_field_definition_list ::= record_field_definition 
            {
              List<RecordTypeToken.FieldDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordTypeToken.FieldDefinition d = (RecordTypeToken.FieldDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList(Arrays.asList(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field_definition_list",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // record_field_definition ::= IDENTIFIER datatype 
            {
              RecordTypeToken.FieldDefinition RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier f = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordTypeToken.FieldDefinition(f, dt, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field_definition",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // record_field_definition ::= IDENTIFIER datatype opt_not_null initial_value_operator expression 
            {
              RecordTypeToken.FieldDefinition RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier f = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeToken dt = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression initial = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordTypeToken.FieldDefinition(f, optionalNonNullable(dt, n), initial); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field_definition",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // initial_value_operator ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // initial_value_operator ::= ASSIGNMENT_OPERATOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cursor ::= NAMED_CURSOR 
            {
              Cursor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NamedCursor(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cursor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cursor ::= IMPLICIT_CURSOR 
            {
              Cursor RESULT =null;
		 RESULT = new ImplicitCursor(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cursor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_atom ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionIdentifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_atom ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_atom ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression_atom ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_atom ::= NUMBER_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberLiteral(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_atom ::= IDENTIFIER DOT EXISTS_OPERATOR LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier collection = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CollectionExistExpression(collection, index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_atom ::= cursor FOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_atom ::= cursor ISOPEN_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_atom ::= cursor NOTFOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_atom ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_atom",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // closing_label ::= IDENTIFIER 
            {
              Label RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier l = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Label(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closing_label",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // closing_label ::= 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closing_label",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
