// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/resources/plsql.flex

package org.example.oracle.main.generated;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.example.oracle.ast.*;


@SuppressWarnings("fallthrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SQ_STRING_LITERAL = 2;
  public static final int DQ_STRING_LITERAL = 4;
  public static final int CS_STRING_LITERAL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\12\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\6\1\40"+
    "\1\6\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\6\1\0\1\55"+
    "\1\0\1\4\1\6\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\6\1\40\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\6\1\0\1\56\1\0"+
    "\1\4\6\0\1\1\32\0\1\1\11\0\1\57\12\0"+
    "\1\57\4\0\1\57\5\0\27\57\1\0\37\57\1\0"+
    "\70\57\2\37\115\57\1\46\u0142\57\4\0\14\57\16\0"+
    "\5\57\7\0\1\57\1\0\1\57\21\0\165\57\1\0"+
    "\2\57\2\0\4\57\1\0\1\57\6\0\1\57\1\0"+
    "\3\57\1\0\1\57\1\0\24\57\1\0\123\57\1\0"+
    "\213\57\1\0\255\57\1\0\46\57\2\0\1\57\6\0"+
    "\51\57\10\0\55\57\1\0\1\57\1\0\2\57\1\0"+
    "\2\57\1\0\1\57\10\0\33\57\4\0\4\57\35\0"+
    "\13\57\5\0\100\57\12\21\4\0\146\57\1\0\10\57"+
    "\2\0\12\57\1\0\6\57\12\21\3\57\2\0\1\57"+
    "\20\0\73\57\2\0\145\57\16\0\12\21\54\57\4\0"+
    "\1\57\2\0\1\57\2\0\56\57\22\0\34\57\4\0"+
    "\13\57\65\0\25\57\1\0\10\57\25\0\17\57\1\0"+
    "\201\57\2\0\12\21\1\0\23\57\1\0\10\57\2\0"+
    "\2\57\2\0\26\57\1\0\7\57\1\0\1\57\3\0"+
    "\4\57\2\0\11\57\2\0\2\57\2\0\4\57\10\0"+
    "\1\57\4\0\2\57\1\0\5\57\2\0\12\21\2\57"+
    "\12\0\1\57\1\0\1\57\2\0\3\57\1\0\6\57"+
    "\4\0\2\57\2\0\26\57\1\0\7\57\1\0\2\57"+
    "\1\0\2\57\1\0\2\57\2\0\1\57\1\0\5\57"+
    "\4\0\2\57\2\0\3\57\3\0\1\57\7\0\4\57"+
    "\1\0\1\57\7\0\12\21\6\57\13\0\3\57\1\0"+
    "\11\57\1\0\3\57\1\0\26\57\1\0\7\57\1\0"+
    "\2\57\1\0\5\57\2\0\12\57\1\0\3\57\1\0"+
    "\3\57\2\0\1\57\17\0\4\57\2\0\12\21\11\0"+
    "\7\57\1\0\3\57\1\0\10\57\2\0\2\57\2\0"+
    "\26\57\1\0\7\57\1\0\2\57\1\0\5\57\2\0"+
    "\11\57\2\0\2\57\2\0\3\57\10\0\2\57\4\0"+
    "\2\57\1\0\5\57\2\0\12\21\1\0\1\57\20\0"+
    "\2\57\1\0\6\57\3\0\3\57\1\0\4\57\3\0"+
    "\2\57\1\0\1\57\1\0\2\57\3\0\2\57\3\0"+
    "\3\57\3\0\14\57\4\0\5\57\3\0\3\57\1\0"+
    "\4\57\2\0\1\57\6\0\1\57\16\0\12\21\20\0"+
    "\15\57\1\0\3\57\1\0\27\57\1\0\20\57\3\0"+
    "\10\57\1\0\3\57\1\0\4\57\7\0\2\57\1\0"+
    "\3\57\5\0\4\57\2\0\12\21\20\0\4\57\1\0"+
    "\10\57\1\0\3\57\1\0\27\57\1\0\12\57\1\0"+
    "\5\57\2\0\11\57\1\0\3\57\1\0\4\57\7\0"+
    "\2\57\7\0\1\57\1\0\4\57\2\0\12\21\1\0"+
    "\2\57\15\0\4\57\1\0\10\57\1\0\3\57\1\0"+
    "\63\57\1\0\3\57\1\0\5\57\5\0\4\57\7\0"+
    "\5\57\2\0\12\21\12\0\6\57\2\0\2\57\1\0"+
    "\22\57\3\0\30\57\1\0\11\57\1\0\1\57\2\0"+
    "\7\57\3\0\1\57\4\0\6\57\1\0\1\57\1\0"+
    "\10\57\6\0\12\21\2\0\2\57\15\0\72\57\5\0"+
    "\17\57\1\0\12\21\47\0\2\57\1\0\1\57\1\0"+
    "\5\57\1\0\30\57\1\0\1\57\1\0\27\57\2\0"+
    "\5\57\1\0\1\57\1\0\6\57\2\0\12\21\2\0"+
    "\4\57\40\0\1\57\27\0\2\57\6\0\12\21\13\0"+
    "\1\57\1\0\1\57\1\0\1\57\4\0\12\57\1\0"+
    "\44\57\4\0\24\57\1\0\22\57\1\0\44\57\11\0"+
    "\1\57\71\0\100\57\12\21\6\0\100\57\12\21\4\57"+
    "\2\0\46\57\1\0\1\57\5\0\1\57\2\0\53\57"+
    "\1\0\u014d\57\1\0\4\57\2\0\7\57\1\0\1\57"+
    "\1\0\4\57\2\0\51\57\1\0\4\57\2\0\41\57"+
    "\1\0\4\57\2\0\7\57\1\0\1\57\1\0\4\57"+
    "\2\0\17\57\1\0\71\57\1\0\4\57\2\0\103\57"+
    "\2\0\3\57\40\0\20\57\20\0\126\57\2\0\6\57"+
    "\3\0\u016c\57\2\0\21\57\1\1\32\57\5\0\113\57"+
    "\3\0\13\57\7\0\15\57\1\0\7\57\13\0\25\57"+
    "\13\0\24\57\14\0\15\57\1\0\3\57\1\0\2\57"+
    "\14\0\124\57\3\0\1\57\4\0\2\57\2\0\12\21"+
    "\41\0\3\57\2\0\12\21\6\0\131\57\7\0\53\57"+
    "\5\0\106\57\12\0\37\57\1\0\14\57\4\0\14\57"+
    "\12\0\12\21\36\57\2\0\5\57\13\0\54\57\4\0"+
    "\32\57\6\0\12\21\46\0\34\57\4\0\77\57\1\0"+
    "\35\57\2\0\1\57\12\21\6\0\12\21\15\0\1\57"+
    "\10\0\17\57\101\0\114\57\4\0\12\21\21\0\11\57"+
    "\14\0\60\57\12\21\72\57\14\0\70\57\10\0\12\21"+
    "\3\0\3\57\12\21\44\57\2\0\11\57\7\0\53\57"+
    "\2\0\3\57\20\0\3\57\1\0\47\57\5\0\372\57"+
    "\1\0\33\57\2\0\6\57\2\0\46\57\2\0\6\57"+
    "\2\0\10\57\1\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\0\37\57\2\0\65\57\1\0\7\57\1\0\1\57"+
    "\3\0\3\57\1\0\7\57\3\0\4\57\2\0\6\57"+
    "\4\0\15\57\5\0\3\57\1\0\7\57\3\0\13\1"+
    "\35\0\2\1\5\0\1\1\17\0\2\57\23\0\1\57"+
    "\12\0\1\1\21\0\1\57\15\0\1\57\20\0\15\57"+
    "\63\0\41\57\21\0\1\57\4\0\1\57\2\0\12\57"+
    "\1\0\1\57\3\0\5\57\6\0\1\57\1\0\1\57"+
    "\1\0\1\57\1\0\1\6\3\57\1\0\13\57\2\0"+
    "\4\57\5\0\5\57\4\0\1\57\21\0\51\57\u022d\0"+
    "\64\57\26\0\57\57\1\0\57\57\1\0\205\57\6\0"+
    "\11\57\14\0\46\57\1\0\1\57\5\0\1\57\2\0"+
    "\70\57\7\0\1\57\17\0\30\57\11\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\7\57\1\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\7\57\1\0\40\57\57\0"+
    "\1\57\320\0\1\1\4\0\3\57\31\0\17\57\1\0"+
    "\5\57\2\0\5\57\4\0\126\57\2\0\2\57\2\0"+
    "\3\57\1\0\132\57\1\0\4\57\5\0\53\57\1\0"+
    "\136\57\21\0\33\57\65\0\306\57\112\0\360\57\20\0"+
    "\215\57\103\0\56\57\2\0\15\57\3\0\20\57\12\21"+
    "\2\57\24\0\63\57\1\0\12\57\1\0\163\57\45\0"+
    "\11\57\2\0\147\57\2\0\65\57\2\0\5\57\60\0"+
    "\61\57\30\0\64\57\14\0\106\57\12\0\12\21\6\0"+
    "\30\57\3\0\1\57\1\0\3\57\12\21\44\57\2\0"+
    "\44\57\14\0\35\57\3\0\101\57\16\0\1\57\12\21"+
    "\6\0\20\57\12\21\5\57\1\0\67\57\11\0\16\57"+
    "\2\0\12\21\6\0\27\57\3\0\111\57\30\0\3\57"+
    "\2\0\20\57\2\0\5\57\12\0\6\57\2\0\6\57"+
    "\2\0\6\57\11\0\7\57\1\0\7\57\1\0\53\57"+
    "\1\0\14\57\10\0\173\57\1\0\2\57\2\0\12\21"+
    "\6\0\244\57\14\0\27\57\4\0\61\57\4\0\u0100\60"+
    "\156\57\2\0\152\57\46\0\7\57\14\0\5\57\5\0"+
    "\14\57\1\0\15\57\1\0\5\57\1\0\1\57\1\0"+
    "\2\57\1\0\2\57\1\0\154\57\41\0\153\57\22\0"+
    "\100\57\2\0\66\57\50\0\14\57\4\0\20\57\20\0"+
    "\20\57\3\0\2\57\30\0\3\57\40\0\5\57\1\0"+
    "\207\57\23\0\12\21\7\0\32\57\4\0\1\57\1\0"+
    "\32\57\13\0\131\57\3\0\6\57\2\0\6\57\2\0"+
    "\6\57\2\0\3\57\43\0\14\57\1\0\32\57\1\0"+
    "\23\57\1\0\2\57\1\0\17\57\2\0\16\57\42\0"+
    "\173\57\105\0\65\57\210\0\1\57\202\0\35\57\3\0"+
    "\61\57\17\0\1\57\37\0\40\57\15\0\36\57\5\0"+
    "\53\57\5\0\36\57\2\0\44\57\4\0\10\57\1\0"+
    "\5\57\52\0\236\57\2\0\12\21\6\0\44\57\4\0"+
    "\44\57\4\0\50\57\10\0\64\57\234\0\67\57\11\0"+
    "\26\57\12\0\10\57\230\0\6\57\2\0\1\57\1\0"+
    "\54\57\1\0\2\57\3\0\1\57\2\0\27\57\12\0"+
    "\27\57\11\0\37\57\101\0\23\57\1\0\2\57\12\0"+
    "\26\57\12\0\32\57\106\0\70\57\6\0\2\57\100\0"+
    "\4\57\1\0\2\57\5\0\10\57\1\0\3\57\1\0"+
    "\35\57\2\0\3\57\4\0\1\57\40\0\35\57\3\0"+
    "\35\57\43\0\10\57\1\0\36\57\31\0\66\57\12\0"+
    "\26\57\12\0\23\57\15\0\22\57\156\0\111\57\67\0"+
    "\63\57\15\0\63\57\15\0\50\57\10\0\12\21\306\0"+
    "\35\57\12\0\1\57\10\0\41\57\217\0\27\57\11\0"+
    "\107\57\37\0\12\21\17\0\74\57\25\0\31\57\7\0"+
    "\12\21\6\0\65\57\1\0\12\21\4\0\3\57\11\0"+
    "\44\57\2\0\1\57\11\0\105\57\4\0\4\57\3\0"+
    "\12\21\1\57\1\0\1\57\43\0\22\57\1\0\45\57"+
    "\6\0\1\57\101\0\7\57\1\0\1\57\1\0\4\57"+
    "\1\0\17\57\1\0\12\57\7\0\73\57\5\0\12\21"+
    "\6\0\4\57\1\0\10\57\2\0\2\57\2\0\26\57"+
    "\1\0\7\57\1\0\2\57\1\0\5\57\1\0\12\57"+
    "\2\0\2\57\2\0\3\57\2\0\1\57\6\0\1\57"+
    "\5\0\7\57\2\0\7\57\3\0\5\57\213\0\113\57"+
    "\5\0\12\21\4\0\2\57\40\0\106\57\1\0\1\57"+
    "\10\0\12\21\246\0\66\57\2\0\11\57\27\0\6\57"+
    "\42\0\101\57\3\0\1\57\13\0\12\21\46\0\71\57"+
    "\7\0\12\21\66\0\33\57\2\0\17\57\4\0\12\21"+
    "\306\0\73\57\145\0\100\57\12\21\25\0\1\57\240\0"+
    "\10\57\2\0\56\57\2\0\10\57\1\0\2\57\33\0"+
    "\77\57\10\0\1\57\10\0\112\57\3\0\1\57\42\0"+
    "\71\57\7\0\11\57\1\0\55\57\1\0\11\57\17\0"+
    "\12\21\30\0\36\57\2\0\26\57\1\0\16\57\111\0"+
    "\7\57\1\0\2\57\1\0\54\57\3\0\1\57\1\0"+
    "\2\57\1\0\11\57\10\0\12\21\6\0\6\57\1\0"+
    "\2\57\1\0\45\57\1\0\2\57\1\0\6\57\7\0"+
    "\12\21\u0136\0\27\57\11\0\232\57\146\0\157\57\21\0"+
    "\304\57\274\0\57\57\321\0\107\57\271\0\71\57\7\0"+
    "\37\57\1\0\12\21\146\0\36\57\2\0\5\57\13\0"+
    "\67\57\11\0\4\57\14\0\12\21\11\0\25\57\5\0"+
    "\23\57\260\0\100\57\200\0\113\57\4\0\71\57\7\0"+
    "\21\57\100\0\2\57\1\0\1\57\34\0\370\57\10\0"+
    "\363\57\15\0\37\57\61\0\3\57\21\0\4\57\10\0"+
    "\u018c\57\4\0\153\57\5\0\15\57\3\0\11\57\7\0"+
    "\12\57\3\0\2\57\306\0\5\57\3\0\6\57\10\0"+
    "\10\57\2\0\7\57\36\0\4\57\224\0\3\57\273\0"+
    "\125\57\1\0\107\57\1\0\2\57\2\0\1\57\2\0"+
    "\2\57\2\0\4\57\1\0\14\57\1\0\1\57\1\0"+
    "\7\57\1\0\101\57\1\0\4\57\2\0\10\57\1\0"+
    "\7\57\1\0\34\57\1\0\4\57\1\0\5\57\1\0"+
    "\1\57\3\0\7\57\1\0\u0154\57\2\0\31\57\1\0"+
    "\31\57\1\0\37\57\1\0\31\57\1\0\37\57\1\0"+
    "\31\57\1\0\37\57\1\0\31\57\1\0\37\57\1\0"+
    "\31\57\1\0\10\57\2\0\62\21\67\57\4\0\62\57"+
    "\10\0\1\57\16\0\1\57\26\0\5\57\1\0\17\57"+
    "\120\0\7\57\1\0\21\57\2\0\7\57\1\0\2\57"+
    "\1\0\5\57\325\0\55\57\3\0\16\57\2\0\12\21"+
    "\4\0\1\57\u0171\0\60\57\12\21\6\0\305\57\13\0"+
    "\7\57\51\0\114\57\4\0\12\21\246\0\4\57\1\0"+
    "\33\57\1\0\2\57\1\0\1\57\2\0\1\57\1\0"+
    "\12\57\1\0\4\57\1\0\1\57\1\0\1\57\6\0"+
    "\1\57\4\0\1\57\1\0\1\57\1\0\1\57\1\0"+
    "\3\57\1\0\2\57\1\0\1\57\2\0\1\57\1\0"+
    "\1\57\1\0\1\57\1\0\1\57\1\0\1\57\1\0"+
    "\2\57\1\0\1\57\2\0\4\57\1\0\7\57\1\0"+
    "\4\57\1\0\4\57\1\0\1\57\1\0\12\57\1\0"+
    "\21\57\5\0\3\57\1\0\5\57\1\0\21\57\164\0"+
    "\32\57\6\0\32\57\6\0\32\57\166\0\327\57\51\0"+
    "\65\57\13\0\336\57\2\0\u0182\57\16\0\u0131\57\37\0"+
    "\36\57\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\20\4\1\1"+
    "\1\23\1\24\1\1\1\23\1\24\1\23\1\25\5\0"+
    "\1\26\1\0\1\2\1\27\1\16\3\0\1\30\1\31"+
    "\1\0\1\32\1\33\3\4\1\34\10\4\1\35\1\4"+
    "\1\36\3\4\1\37\1\40\1\0\13\4\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\5\0\2\2\1\0"+
    "\2\50\1\0\1\16\1\0\1\51\11\4\1\52\4\4"+
    "\1\53\1\4\1\54\2\4\1\55\1\4\1\56\1\57"+
    "\7\4\6\0\3\4\1\60\4\4\1\61\4\4\1\62"+
    "\1\63\5\4\1\64\1\65\1\66\2\4\1\67\4\0"+
    "\1\70\1\71\1\72\1\73\5\4\1\74\1\4\1\75"+
    "\1\76\1\77\3\4\1\100\2\4\1\101\3\0\2\4"+
    "\1\102\2\4\1\103\1\104\1\105\1\4\1\106\1\4"+
    "\1\107\2\0\1\110\1\4\1\111\1\112\1\113\1\114"+
    "\1\0\1\115\1\4\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\304"+
    "\0\u0157\0\u0188\0\304\0\304\0\304\0\u01b9\0\u01ea\0\304"+
    "\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\304\0\u0310\0\304"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\304\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\304\0\u08ce"+
    "\0\u08ff\0\304\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\304"+
    "\0\u0a25\0\304\0\304\0\u0a56\0\u0a87\0\u0ab8\0\u0157\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0157"+
    "\0\u0c71\0\u0157\0\u0ca2\0\u0cd3\0\u0d04\0\u0157\0\u0157\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\304\0\304\0\304\0\304\0\304"+
    "\0\304\0\304\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\304"+
    "\0\u1076\0\u10a7\0\304\0\u09c3\0\u10d8\0\u10d8\0\u1109\0\u0157"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u0157\0\u12f3\0\u1324\0\u1355\0\u1386\0\u0157\0\u13b7"+
    "\0\304\0\u13e8\0\u1419\0\u0157\0\u144a\0\u0157\0\u0157\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u0157"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u0157\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u0157\0\u0157\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u0157\0\u0157\0\u0157\0\u1a08\0\u1a39\0\u0157\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\304\0\304\0\u0157\0\u0157\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u0157\0\u1c23\0\u0157\0\u0157\0\u0157"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u0157\0\u1ce7\0\u1d18\0\304\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u0157\0\u1e3e\0\u1e6f\0\u0157"+
    "\0\u0157\0\u0157\0\u1ea0\0\u0157\0\u1ed1\0\304\0\u1f02\0\u1f33"+
    "\0\u0157\0\u1f64\0\u0157\0\u0157\0\u0157\0\u0157\0\u1f95\0\304"+
    "\0\u1fc6\0\304\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\11\1\40\1\41\1\42\1\43"+
    "\1\11\1\44\1\45\1\46\1\47\1\11\1\50\1\51"+
    "\2\11\1\5\1\52\2\5\2\53\2\5\4\53\1\54"+
    "\44\53\1\55\3\53\2\56\2\5\1\56\1\57\47\56"+
    "\1\55\3\56\61\60\62\0\3\6\102\0\1\61\41\0"+
    "\1\11\12\0\1\11\5\0\26\11\2\0\1\11\35\0"+
    "\1\62\2\0\1\63\1\0\1\64\3\0\1\65\1\0"+
    "\1\66\24\0\1\67\64\0\1\70\1\0\1\24\55\0"+
    "\1\71\1\70\1\0\1\24\56\0\1\72\1\0\1\73"+
    "\52\0\1\74\64\0\1\75\1\0\1\24\11\0\1\76"+
    "\33\0\1\77\16\0\1\100\1\0\26\77\30\0\1\101"+
    "\1\102\1\61\57\0\1\103\41\0\1\11\12\0\1\11"+
    "\5\0\12\11\1\104\3\11\1\105\7\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\4\11\1\106\20\11"+
    "\1\107\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\1\110\6\11\1\111\11\11\1\112\4\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\4\11\1\113\21\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\11\11"+
    "\1\114\1\115\11\11\1\116\1\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\1\117\25\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\5\11\1\120\4\11"+
    "\1\121\4\11\1\122\6\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\13\11\1\123\12\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\13\11\1\124\5\11"+
    "\1\125\4\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\5\11\1\126\10\11\1\127\7\11\2\0\1\11"+
    "\7\0\1\11\1\0\1\130\10\0\1\11\5\0\26\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\1\131"+
    "\3\11\1\132\21\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\4\11\1\133\10\11\1\134\3\11\1\135"+
    "\4\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\1\136\6\11\1\137\6\11\1\140\6\11\1\141\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\1\142\25\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\7\11"+
    "\1\143\16\11\2\0\1\11\57\0\1\144\2\0\2\53"+
    "\2\0\4\53\1\0\44\53\1\0\3\53\10\0\1\145"+
    "\111\0\1\146\3\0\1\147\7\0\1\150\3\0\2\56"+
    "\2\0\1\56\1\0\47\56\1\0\3\56\5\0\1\151"+
    "\63\0\1\152\112\0\1\153\64\0\1\154\54\0\1\155"+
    "\60\0\1\156\72\0\1\157\25\0\1\73\37\0\2\71"+
    "\1\160\1\161\55\71\21\0\1\73\11\0\1\76\25\0"+
    "\13\74\1\162\45\74\17\163\1\0\1\163\1\73\11\163"+
    "\1\164\25\163\14\0\1\165\1\0\1\165\2\0\1\166"+
    "\45\0\1\77\12\0\1\77\5\0\26\77\2\0\1\77"+
    "\7\0\1\167\20\0\26\167\12\0\1\11\12\0\1\11"+
    "\5\0\3\11\1\170\22\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\16\11\1\171\7\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\6\11\1\172\11\11"+
    "\1\173\5\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\17\11\1\174\6\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\1\175\25\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\16\11\1\176\7\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\2\11\1\177"+
    "\2\11\1\200\20\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\17\11\1\201\6\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\3\11\1\202\22\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\10\11\1\203"+
    "\15\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\11\11\1\204\14\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\3\11\1\205\22\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\13\11\1\206\12\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\20\11\1\207"+
    "\5\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\11\11\1\210\14\11\2\0\1\11\1\0\2\211\1\0"+
    "\55\211\7\0\1\11\12\0\1\11\5\0\12\11\1\212"+
    "\13\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\2\11\1\213\2\11\1\214\12\11\1\215\5\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\20\11\1\216"+
    "\5\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\11\11\1\217\14\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\1\11\1\220\24\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\1\11\1\221\24\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\4\11\1\222"+
    "\21\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\21\11\1\223\4\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\14\11\1\224\11\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\16\11\1\225\7\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\4\11\1\226"+
    "\21\11\2\0\1\11\51\0\1\227\52\0\1\230\65\0"+
    "\1\231\63\0\1\232\51\0\1\233\17\0\1\160\56\0"+
    "\13\74\1\162\4\74\1\160\40\74\21\0\1\166\45\0"+
    "\1\167\12\0\1\167\4\0\1\234\26\167\2\0\1\167"+
    "\7\0\1\11\12\0\1\11\5\0\1\235\25\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\10\11\1\236"+
    "\15\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\23\11\1\237\2\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\4\11\1\240\21\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\16\11\1\241\7\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\17\11\1\242"+
    "\6\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\11\11\1\243\14\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\1\244\25\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\4\11\1\245\3\11\1\246\15\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\17\11"+
    "\1\247\6\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\17\11\1\250\6\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\4\11\1\251\21\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\14\11\1\252\11\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\11\11"+
    "\1\253\14\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\6\11\1\254\17\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\13\11\1\255\12\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\21\11\1\256\4\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\20\11"+
    "\1\257\5\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\11\11\1\260\14\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\12\11\1\261\13\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\4\11\1\262\21\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\4\11"+
    "\1\263\21\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\16\11\1\264\6\11\1\265\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\12\11\1\266\13\11\2\0"+
    "\1\11\42\0\1\267\62\0\1\270\51\0\1\271\73\0"+
    "\1\272\44\0\1\273\53\0\1\274\40\0\1\11\12\0"+
    "\1\11\5\0\25\11\1\275\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\12\11\1\276\13\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\4\11\1\277\21\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\1\300"+
    "\25\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\13\11\1\301\12\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\1\302\25\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\21\11\1\303\4\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\5\11\1\304\20\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\20\11"+
    "\1\305\5\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\4\11\1\306\21\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\24\11\1\307\1\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\4\11\1\310\21\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\16\11"+
    "\1\311\7\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\16\11\1\312\7\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\25\11\1\313\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\4\11\1\314\21\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\1\315\25\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\10\11"+
    "\1\316\15\11\2\0\1\11\33\0\1\317\61\0\1\320"+
    "\67\0\1\321\72\0\1\322\12\0\1\11\12\0\1\11"+
    "\5\0\4\11\1\323\21\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\2\11\1\324\23\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\16\11\1\325\7\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\16\11"+
    "\1\326\7\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\11\11\1\327\14\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\17\11\1\330\6\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\3\11\1\331\22\11"+
    "\2\0\1\11\7\0\1\11\12\0\1\11\5\0\12\11"+
    "\1\332\13\11\2\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\14\11\1\333\11\11\2\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\25\11\1\334\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\12\11\1\335\13\11\2\0"+
    "\1\11\42\0\1\336\67\0\1\337\53\0\1\340\23\0"+
    "\1\11\12\0\1\11\5\0\12\11\1\341\13\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\20\11\1\342"+
    "\5\11\2\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\4\11\1\343\21\11\2\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\20\11\1\344\5\11\2\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\4\11\1\345\21\11\2\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\6\11\1\346"+
    "\17\11\2\0\1\11\42\0\1\347\52\0\1\350\33\0"+
    "\1\11\12\0\1\11\5\0\4\11\1\351\21\11\2\0"+
    "\1\11\33\0\1\352\34\0\1\11\12\0\1\11\5\0"+
    "\16\11\1\353\7\11\2\0\1\11\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8183];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\2\1\3\11\2\1\1\11"+
    "\5\1\1\11\1\1\1\11\30\1\1\11\5\0\1\11"+
    "\1\0\1\1\1\11\1\1\3\0\1\1\1\11\1\0"+
    "\2\11\24\1\1\0\13\1\7\11\5\0\1\11\1\1"+
    "\1\0\1\11\1\1\1\0\1\1\1\0\21\1\1\11"+
    "\15\1\6\0\32\1\4\0\2\11\22\1\1\11\3\0"+
    "\13\1\1\11\2\0\6\1\1\0\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    String customDelimiter = "";
    ComplexSymbolFactory factory;

    private void setDelimiter(String openingDelimiter) {
        switch (openingDelimiter) {
            case "[":
                this.customDelimiter = "]";
                break;
            case "{":
                this.customDelimiter = "}";
                break;
            case "<":
                this.customDelimiter = ">";
                break;
            case "(":
                this.customDelimiter = ")";
                break;
            default:
                this.customDelimiter = openingDelimiter;
                break;
        }
    }

    private Symbol symbol(String name, int type) {
        Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));

        return factory.newSymbol(name, type, start, end);
    }

    private Symbol symbol(String name, int type, Object value) {
        Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));

        return factory.newSymbol(name, type, start, end, value);
    }

    private Symbol symbol(String name, int type, Object value, int buflen) {
        Location start = new Location(yyline + 1, yycolumn + yylength() - buflen, (int) (yychar + yylength() - buflen));
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));
        return factory.newSymbol(name, type, start, end, value);
    }

    public Scanner(java.io.Reader in, ComplexSymbolFactory factory) {
        this(in);
        this.factory = factory;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
    Location end = new Location(yyline + 1, yycolumn + 1, (int) (yychar + 1));
    return factory.newSymbol("EOF", PlSymbol.EOF, start, end);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character '" + yytext() + "' on line " + yyline + " column " + yycolumn);
            }
          // fall through
          case 80: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 81: break;
          case 3:
            { string.setLength(0); yybegin(DQ_STRING_LITERAL);
            }
          // fall through
          case 82: break;
          case 4:
            { return symbol("identifier", PlSymbol.IDENTIFIER, new Identifier(yytext()));
            }
          // fall through
          case 83: break;
          case 5:
            { string.setLength(0); yybegin(SQ_STRING_LITERAL);
            }
          // fall through
          case 84: break;
          case 6:
            { return symbol("(", PlSymbol.LEFT_PARENTHESIS);
            }
          // fall through
          case 85: break;
          case 7:
            { return symbol(")", PlSymbol.RIGHT_PARENTHESIS);
            }
          // fall through
          case 86: break;
          case 8:
            { return symbol("mult", PlSymbol.MULTIPLICATION_OPERATOR);
            }
          // fall through
          case 87: break;
          case 9:
            { return symbol("add", PlSymbol.ADDITION_OPERATOR);
            }
          // fall through
          case 88: break;
          case 10:
            { return symbol("comma", PlSymbol.COMMA);
            }
          // fall through
          case 89: break;
          case 11:
            { return symbol("sub", PlSymbol.SUBTRACTION_OPERATOR);
            }
          // fall through
          case 90: break;
          case 12:
            { return symbol("dot", PlSymbol.DOT);
            }
          // fall through
          case 91: break;
          case 13:
            { return symbol("div", PlSymbol.DIVISION_OPERATOR);
            }
          // fall through
          case 92: break;
          case 14:
            { return symbol("number", PlSymbol.NUMBER_LITERAL, yytext());
            }
          // fall through
          case 93: break;
          case 15:
            { return symbol("semi", PlSymbol.SEMI);
            }
          // fall through
          case 94: break;
          case 16:
            { return symbol("le", PlSymbol.LESS_THAN_OPERATOR);
            }
          // fall through
          case 95: break;
          case 17:
            { return symbol("eq", PlSymbol.EQUAL_OPERATOR);
            }
          // fall through
          case 96: break;
          case 18:
            { return symbol("gt", PlSymbol.GREATER_THAN_OPERATOR);
            }
          // fall through
          case 97: break;
          case 19:
            { string.append(yytext());
            }
          // fall through
          case 98: break;
          case 20:
            { yybegin(YYINITIAL); return symbol("string", PlSymbol.STRING_LITERAL, string.toString(), string.length());
            }
          // fall through
          case 99: break;
          case 21:
            { return symbol("neq", PlSymbol.NOT_EQUAL_OPERATOR);
            }
          // fall through
          case 100: break;
          case 22:
            { return symbol("exp", PlSymbol.EXPONENTIATION_OPERATOR);
            }
          // fall through
          case 101: break;
          case 23:
            { return symbol("rangeoperator", PlSymbol.RANGE_OPERATOR);
            }
          // fall through
          case 102: break;
          case 24:
            { return symbol("namedcursor", PlSymbol.NAMED_CURSOR, yytext().substring(1));
            }
          // fall through
          case 103: break;
          case 25:
            { return symbol("assign", PlSymbol.ASSIGNMENT_OPERATOR);
            }
          // fall through
          case 104: break;
          case 26:
            { return symbol("leq", PlSymbol.LESS_THAN_OR_EQUAL_OPERATOR);
            }
          // fall through
          case 105: break;
          case 27:
            { return symbol("gtq", PlSymbol.GREATER_THAN_OR_EQUAL_OPERATOR);
            }
          // fall through
          case 106: break;
          case 28:
            { return symbol("by", PlSymbol.BY);
            }
          // fall through
          case 107: break;
          case 29:
            { return symbol("if", PlSymbol.IF);
            }
          // fall through
          case 108: break;
          case 30:
            { return symbol("is", PlSymbol.IS_OPERATOR);
            }
          // fall through
          case 109: break;
          case 31:
            { return symbol("of", PlSymbol.OF);
            }
          // fall through
          case 110: break;
          case 32:
            { return symbol("booloperator", PlSymbol.OR_OPERATOR);
            }
          // fall through
          case 111: break;
          case 33:
            { return symbol("concat", PlSymbol.CONCATENATION_OPERATOR);
            }
          // fall through
          case 112: break;
          case 34:
            { string.append('\'');
            }
          // fall through
          case 113: break;
          case 35:
            { string.append('\n');
            }
          // fall through
          case 114: break;
          case 36:
            { string.append('\r');
            }
          // fall through
          case 115: break;
          case 37:
            { string.append('\\');
            }
          // fall through
          case 116: break;
          case 38:
            { string.append('"');
            }
          // fall through
          case 117: break;
          case 39:
            { if (yytext().substring(0, 1).equals(customDelimiter)) {
          yybegin(YYINITIAL);
          return symbol("string", PlSymbol.STRING_LITERAL, string.toString(), string.length());
      } else {
          string.append(yytext());
      }
            }
          // fall through
          case 118: break;
          case 40:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol("number", PlSymbol.NUMBER_LITERAL, yytext());
            }
          // fall through
          case 119: break;
          case 41:
            { return symbol("booloperator", PlSymbol.AND_OPERATOR);
            }
          // fall through
          case 120: break;
          case 42:
            { return symbol("end", PlSymbol.END);
            }
          // fall through
          case 121: break;
          case 43:
            { return symbol("not", PlSymbol.NOT_OPERATOR);
            }
          // fall through
          case 122: break;
          case 44:
            { string.setLength(0); this.setDelimiter(yytext().substring(2)); yybegin(CS_STRING_LITERAL);
            }
          // fall through
          case 123: break;
          case 45:
            { return symbol("ref", PlSymbol.REF);
            }
          // fall through
          case 124: break;
          case 46:
            { return symbol("set", PlSymbol.SET);
            }
          // fall through
          case 125: break;
          case 47:
            { return symbol("implicitcursor", PlSymbol.IMPLICIT_CURSOR);
            }
          // fall through
          case 126: break;
          case 48:
            { return symbol("case", PlSymbol.CASE);
            }
          // fall through
          case 127: break;
          case 49:
            { return symbol("else", PlSymbol.ELSE);
            }
          // fall through
          case 128: break;
          case 50:
            { return symbol("loop", PlSymbol.LOOP);
            }
          // fall through
          case 129: break;
          case 51:
            { return symbol("null", PlSymbol.NULL_LITERAL);
            }
          // fall through
          case 130: break;
          case 52:
            { return symbol("then", PlSymbol.THEN);
            }
          // fall through
          case 131: break;
          case 53:
            { return symbol("boolliteral", PlSymbol.BOOLEAN_LITERAL, true);
            }
          // fall through
          case 132: break;
          case 54:
            { return symbol("type", PlSymbol.TYPE);
            }
          // fall through
          case 133: break;
          case 55:
            { return symbol("when", PlSymbol.WHEN);
            }
          // fall through
          case 134: break;
          case 56:
            { return symbol("type", PlSymbol.TYPE_ATTRIBUTE_OPERATOR);
            }
          // fall through
          case 135: break;
          case 57:
            { String label = yytext(); return symbol("label", PlSymbol.LABEL, label.substring(2, label.length() - 2));
            }
          // fall through
          case 136: break;
          case 58:
            { return symbol("array", PlSymbol.ARRAY);
            }
          // fall through
          case 137: break;
          case 59:
            { return symbol("begin", PlSymbol.BEGIN);
            }
          // fall through
          case 138: break;
          case 60:
            { return symbol("elsif", PlSymbol.ELSIF);
            }
          // fall through
          case 139: break;
          case 61:
            { return symbol("boolliteral", PlSymbol.BOOLEAN_LITERAL, false);
            }
          // fall through
          case 140: break;
          case 62:
            { return symbol("index", PlSymbol.INDEX);
            }
          // fall through
          case 141: break;
          case 63:
            { return symbol("range", PlSymbol.RANGE);
            }
          // fall through
          case 142: break;
          case 64:
            { return symbol("table", PlSymbol.TABLE);
            }
          // fall through
          case 143: break;
          case 65:
            { return symbol("found", PlSymbol.FOUND_OPERATOR);
            }
          // fall through
          case 144: break;
          case 66:
            { return symbol("cursor", PlSymbol.CURSOR);
            }
          // fall through
          case 145: break;
          case 67:
            { return symbol("exists", PlSymbol.EXISTS_OPERATOR);
            }
          // fall through
          case 146: break;
          case 68:
            { return symbol("record", PlSymbol.RECORD);
            }
          // fall through
          case 147: break;
          case 69:
            { return symbol("return", PlSymbol.RETURN);
            }
          // fall through
          case 148: break;
          case 70:
            { return symbol("varray", PlSymbol.VARRAY);
            }
          // fall through
          case 149: break;
          case 71:
            { return symbol("isopen", PlSymbol.ISOPEN_OPERATOR);
            }
          // fall through
          case 150: break;
          case 72:
            { return symbol("between", PlSymbol.BETWEEN_OPERATOR);
            }
          // fall through
          case 151: break;
          case 73:
            { return symbol("declare", PlSymbol.DECLARE);
            }
          // fall through
          case 152: break;
          case 74:
            { return symbol("default", PlSymbol.DEFAULT);
            }
          // fall through
          case 153: break;
          case 75:
            { return symbol("subtype", PlSymbol.SUBTYPE);
            }
          // fall through
          case 154: break;
          case 76:
            { return symbol("varying", PlSymbol.VARYING);
            }
          // fall through
          case 155: break;
          case 77:
            { return symbol("rowtype", PlSymbol.ROWTYPE_ATTRIBUTE_OPERATOR);
            }
          // fall through
          case 156: break;
          case 78:
            { return symbol("notfound", PlSymbol.NOTFOUND_OPERATOR);
            }
          // fall through
          case 157: break;
          case 79:
            { return symbol("character", PlSymbol.CHARACTER);
            }
          // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
