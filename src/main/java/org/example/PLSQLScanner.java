// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/resources/plsql.flex

package org.example;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.example.plsql.ast.*;


@SuppressWarnings("fallthrough")
public class PLSQLScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SQ_STRING_LITERAL = 2;
  public static final int DQ_STRING_LITERAL = 4;
  public static final int CS_STRING_LITERAL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\12\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\6"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\6\1\37"+
    "\1\6\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\6\1\50\1\51\2\6\1\0\1\52\1\0"+
    "\1\4\1\6\1\0\4\6\1\53\10\6\1\54\2\6"+
    "\1\55\1\56\10\6\1\0\1\57\1\0\1\4\6\0"+
    "\1\1\32\0\1\1\11\0\1\60\12\0\1\60\4\0"+
    "\1\60\5\0\27\60\1\0\37\60\1\0\u01ca\60\4\0"+
    "\14\60\16\0\5\60\7\0\1\60\1\0\1\60\21\0"+
    "\165\60\1\0\2\60\2\0\4\60\1\0\1\60\6\0"+
    "\1\60\1\0\3\60\1\0\1\60\1\0\24\60\1\0"+
    "\123\60\1\0\213\60\1\0\255\60\1\0\46\60\2\0"+
    "\1\60\6\0\51\60\10\0\55\60\1\0\1\60\1\0"+
    "\2\60\1\0\2\60\1\0\1\60\10\0\33\60\4\0"+
    "\4\60\35\0\13\60\5\0\100\60\12\21\4\0\146\60"+
    "\1\0\10\60\2\0\12\60\1\0\6\60\12\21\3\60"+
    "\2\0\1\60\20\0\73\60\2\0\145\60\16\0\12\21"+
    "\54\60\4\0\1\60\2\0\1\60\2\0\56\60\22\0"+
    "\34\60\4\0\13\60\65\0\25\60\1\0\10\60\25\0"+
    "\17\60\1\0\201\60\2\0\12\21\1\0\23\60\1\0"+
    "\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0"+
    "\1\60\3\0\4\60\2\0\11\60\2\0\2\60\2\0"+
    "\4\60\10\0\1\60\4\0\2\60\1\0\5\60\2\0"+
    "\12\21\2\60\12\0\1\60\1\0\1\60\2\0\3\60"+
    "\1\0\6\60\4\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\2\60\1\0\2\60\2\0\1\60"+
    "\1\0\5\60\4\0\2\60\2\0\3\60\3\0\1\60"+
    "\7\0\4\60\1\0\1\60\7\0\12\21\6\60\13\0"+
    "\3\60\1\0\11\60\1\0\3\60\1\0\26\60\1\0"+
    "\7\60\1\0\2\60\1\0\5\60\2\0\12\60\1\0"+
    "\3\60\1\0\3\60\2\0\1\60\17\0\4\60\2\0"+
    "\12\21\11\0\7\60\1\0\3\60\1\0\10\60\2\0"+
    "\2\60\2\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\5\60\2\0\11\60\2\0\2\60\2\0\3\60\10\0"+
    "\2\60\4\0\2\60\1\0\5\60\2\0\12\21\1\0"+
    "\1\60\20\0\2\60\1\0\6\60\3\0\3\60\1\0"+
    "\4\60\3\0\2\60\1\0\1\60\1\0\2\60\3\0"+
    "\2\60\3\0\3\60\3\0\14\60\4\0\5\60\3\0"+
    "\3\60\1\0\4\60\2\0\1\60\6\0\1\60\16\0"+
    "\12\21\20\0\15\60\1\0\3\60\1\0\27\60\1\0"+
    "\20\60\3\0\10\60\1\0\3\60\1\0\4\60\7\0"+
    "\2\60\1\0\3\60\5\0\4\60\2\0\12\21\20\0"+
    "\4\60\1\0\10\60\1\0\3\60\1\0\27\60\1\0"+
    "\12\60\1\0\5\60\2\0\11\60\1\0\3\60\1\0"+
    "\4\60\7\0\2\60\7\0\1\60\1\0\4\60\2\0"+
    "\12\21\1\0\2\60\15\0\4\60\1\0\10\60\1\0"+
    "\3\60\1\0\63\60\1\0\3\60\1\0\5\60\5\0"+
    "\4\60\7\0\5\60\2\0\12\21\12\0\6\60\2\0"+
    "\2\60\1\0\22\60\3\0\30\60\1\0\11\60\1\0"+
    "\1\60\2\0\7\60\3\0\1\60\4\0\6\60\1\0"+
    "\1\60\1\0\10\60\6\0\12\21\2\0\2\60\15\0"+
    "\72\60\5\0\17\60\1\0\12\21\47\0\2\60\1\0"+
    "\1\60\1\0\5\60\1\0\30\60\1\0\1\60\1\0"+
    "\27\60\2\0\5\60\1\0\1\60\1\0\6\60\2\0"+
    "\12\21\2\0\4\60\40\0\1\60\27\0\2\60\6\0"+
    "\12\21\13\0\1\60\1\0\1\60\1\0\1\60\4\0"+
    "\12\60\1\0\44\60\4\0\24\60\1\0\22\60\1\0"+
    "\44\60\11\0\1\60\71\0\100\60\12\21\6\0\100\60"+
    "\12\21\4\60\2\0\46\60\1\0\1\60\5\0\1\60"+
    "\2\0\53\60\1\0\115\60\1\0\4\60\2\0\7\60"+
    "\1\0\1\60\1\0\4\60\2\0\51\60\1\0\4\60"+
    "\2\0\41\60\1\0\4\60\2\0\7\60\1\0\1\60"+
    "\1\0\4\60\2\0\17\60\1\0\71\60\1\0\4\60"+
    "\2\0\103\60\2\0\3\60\40\0\20\60\20\0\126\60"+
    "\2\0\6\60\3\0\u016c\60\2\0\21\60\1\1\32\60"+
    "\5\0\113\60\3\0\13\60\7\0\15\60\1\0\7\60"+
    "\13\0\25\60\13\0\24\60\14\0\15\60\1\0\3\60"+
    "\1\0\2\60\14\0\124\60\3\0\1\60\4\0\2\60"+
    "\2\0\12\21\41\0\3\60\2\0\12\21\6\0\131\60"+
    "\7\0\53\60\5\0\106\60\12\0\37\60\1\0\14\60"+
    "\4\0\14\60\12\0\12\21\36\60\2\0\5\60\13\0"+
    "\54\60\4\0\32\60\6\0\12\21\46\0\34\60\4\0"+
    "\77\60\1\0\35\60\2\0\1\60\12\21\6\0\12\21"+
    "\15\0\1\60\10\0\17\60\101\0\114\60\4\0\12\21"+
    "\21\0\11\60\14\0\60\60\12\21\72\60\14\0\70\60"+
    "\10\0\12\21\3\0\3\60\12\21\44\60\2\0\11\60"+
    "\7\0\53\60\2\0\3\60\20\0\3\60\1\0\47\60"+
    "\5\0\372\60\1\0\33\60\2\0\6\60\2\0\46\60"+
    "\2\0\6\60\2\0\10\60\1\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60"+
    "\1\0\1\60\3\0\3\60\1\0\7\60\3\0\4\60"+
    "\2\0\6\60\4\0\15\60\5\0\3\60\1\0\7\60"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\17\0\2\60"+
    "\23\0\1\60\12\0\1\1\21\0\1\60\15\0\1\60"+
    "\20\0\15\60\63\0\41\60\21\0\1\60\4\0\1\60"+
    "\2\0\12\60\1\0\1\60\3\0\5\60\6\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\4\60\1\0\13\60"+
    "\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60"+
    "\u022d\0\64\60\26\0\57\60\1\0\57\60\1\0\205\60"+
    "\6\0\11\60\14\0\46\60\1\0\1\60\5\0\1\60"+
    "\2\0\70\60\7\0\1\60\17\0\30\60\11\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\40\60"+
    "\57\0\1\60\320\0\1\1\4\0\3\60\31\0\17\60"+
    "\1\0\5\60\2\0\5\60\4\0\126\60\2\0\2\60"+
    "\2\0\3\60\1\0\132\60\1\0\4\60\5\0\53\60"+
    "\1\0\136\60\21\0\33\60\65\0\306\60\112\0\360\60"+
    "\20\0\215\60\103\0\56\60\2\0\15\60\3\0\20\60"+
    "\12\21\2\60\24\0\63\60\1\0\12\60\1\0\163\60"+
    "\45\0\11\60\2\0\147\60\2\0\65\60\2\0\5\60"+
    "\60\0\61\60\30\0\64\60\14\0\106\60\12\0\12\21"+
    "\6\0\30\60\3\0\1\60\1\0\3\60\12\21\44\60"+
    "\2\0\44\60\14\0\35\60\3\0\101\60\16\0\1\60"+
    "\12\21\6\0\20\60\12\21\5\60\1\0\67\60\11\0"+
    "\16\60\2\0\12\21\6\0\27\60\3\0\111\60\30\0"+
    "\3\60\2\0\20\60\2\0\5\60\12\0\6\60\2\0"+
    "\6\60\2\0\6\60\11\0\7\60\1\0\7\60\1\0"+
    "\53\60\1\0\14\60\10\0\173\60\1\0\2\60\2\0"+
    "\12\21\6\0\244\60\14\0\27\60\4\0\61\60\4\0"+
    "\u0100\61\156\60\2\0\152\60\46\0\7\60\14\0\5\60"+
    "\5\0\14\60\1\0\15\60\1\0\5\60\1\0\1\60"+
    "\1\0\2\60\1\0\2\60\1\0\154\60\41\0\153\60"+
    "\22\0\100\60\2\0\66\60\50\0\14\60\4\0\20\60"+
    "\20\0\20\60\3\0\2\60\30\0\3\60\40\0\5\60"+
    "\1\0\207\60\23\0\12\21\7\0\32\60\4\0\1\60"+
    "\1\0\32\60\13\0\131\60\3\0\6\60\2\0\6\60"+
    "\2\0\6\60\2\0\3\60\43\0\14\60\1\0\32\60"+
    "\1\0\23\60\1\0\2\60\1\0\17\60\2\0\16\60"+
    "\42\0\173\60\105\0\65\60\210\0\1\60\202\0\35\60"+
    "\3\0\61\60\17\0\1\60\37\0\40\60\15\0\36\60"+
    "\5\0\53\60\5\0\36\60\2\0\44\60\4\0\10\60"+
    "\1\0\5\60\52\0\236\60\2\0\12\21\6\0\44\60"+
    "\4\0\44\60\4\0\50\60\10\0\64\60\234\0\67\60"+
    "\11\0\26\60\12\0\10\60\230\0\6\60\2\0\1\60"+
    "\1\0\54\60\1\0\2\60\3\0\1\60\2\0\27\60"+
    "\12\0\27\60\11\0\37\60\101\0\23\60\1\0\2\60"+
    "\12\0\26\60\12\0\32\60\106\0\70\60\6\0\2\60"+
    "\100\0\4\60\1\0\2\60\5\0\10\60\1\0\3\60"+
    "\1\0\35\60\2\0\3\60\4\0\1\60\40\0\35\60"+
    "\3\0\35\60\43\0\10\60\1\0\36\60\31\0\66\60"+
    "\12\0\26\60\12\0\23\60\15\0\22\60\156\0\111\60"+
    "\67\0\63\60\15\0\63\60\15\0\50\60\10\0\12\21"+
    "\306\0\35\60\12\0\1\60\10\0\41\60\217\0\27\60"+
    "\11\0\107\60\37\0\12\21\17\0\74\60\25\0\31\60"+
    "\7\0\12\21\6\0\65\60\1\0\12\21\4\0\3\60"+
    "\11\0\44\60\2\0\1\60\11\0\105\60\4\0\4\60"+
    "\3\0\12\21\1\60\1\0\1\60\43\0\22\60\1\0"+
    "\45\60\6\0\1\60\101\0\7\60\1\0\1\60\1\0"+
    "\4\60\1\0\17\60\1\0\12\60\7\0\73\60\5\0"+
    "\12\21\6\0\4\60\1\0\10\60\2\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\5\60\1\0"+
    "\12\60\2\0\2\60\2\0\3\60\2\0\1\60\6\0"+
    "\1\60\5\0\7\60\2\0\7\60\3\0\5\60\213\0"+
    "\113\60\5\0\12\21\4\0\2\60\40\0\106\60\1\0"+
    "\1\60\10\0\12\21\246\0\66\60\2\0\11\60\27\0"+
    "\6\60\42\0\101\60\3\0\1\60\13\0\12\21\46\0"+
    "\71\60\7\0\12\21\66\0\33\60\2\0\17\60\4\0"+
    "\12\21\306\0\73\60\145\0\100\60\12\21\25\0\1\60"+
    "\240\0\10\60\2\0\56\60\2\0\10\60\1\0\2\60"+
    "\33\0\77\60\10\0\1\60\10\0\112\60\3\0\1\60"+
    "\42\0\71\60\7\0\11\60\1\0\55\60\1\0\11\60"+
    "\17\0\12\21\30\0\36\60\2\0\26\60\1\0\16\60"+
    "\111\0\7\60\1\0\2\60\1\0\54\60\3\0\1\60"+
    "\1\0\2\60\1\0\11\60\10\0\12\21\6\0\6\60"+
    "\1\0\2\60\1\0\45\60\1\0\2\60\1\0\6\60"+
    "\7\0\12\21\u0136\0\27\60\11\0\232\60\146\0\157\60"+
    "\21\0\304\60\274\0\57\60\321\0\107\60\271\0\71\60"+
    "\7\0\37\60\1\0\12\21\146\0\36\60\2\0\5\60"+
    "\13\0\67\60\11\0\4\60\14\0\12\21\11\0\25\60"+
    "\5\0\23\60\260\0\100\60\200\0\113\60\4\0\71\60"+
    "\7\0\21\60\100\0\2\60\1\0\1\60\34\0\370\60"+
    "\10\0\363\60\15\0\37\60\61\0\3\60\21\0\4\60"+
    "\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0\11\60"+
    "\7\0\12\60\3\0\2\60\306\0\5\60\3\0\6\60"+
    "\10\0\10\60\2\0\7\60\36\0\4\60\224\0\3\60"+
    "\273\0\125\60\1\0\107\60\1\0\2\60\2\0\1\60"+
    "\2\0\2\60\2\0\4\60\1\0\14\60\1\0\1\60"+
    "\1\0\7\60\1\0\101\60\1\0\4\60\2\0\10\60"+
    "\1\0\7\60\1\0\34\60\1\0\4\60\1\0\5\60"+
    "\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0\31\60"+
    "\1\0\31\60\1\0\37\60\1\0\31\60\1\0\37\60"+
    "\1\0\31\60\1\0\37\60\1\0\31\60\1\0\37\60"+
    "\1\0\31\60\1\0\10\60\2\0\62\21\67\60\4\0"+
    "\62\60\10\0\1\60\16\0\1\60\26\0\5\60\1\0"+
    "\17\60\120\0\7\60\1\0\21\60\2\0\7\60\1\0"+
    "\2\60\1\0\5\60\325\0\55\60\3\0\16\60\2\0"+
    "\12\21\4\0\1\60\u0171\0\60\60\12\21\6\0\305\60"+
    "\13\0\7\60\51\0\114\60\4\0\12\21\246\0\4\60"+
    "\1\0\33\60\1\0\2\60\1\0\1\60\2\0\1\60"+
    "\1\0\12\60\1\0\4\60\1\0\1\60\1\0\1\60"+
    "\6\0\1\60\4\0\1\60\1\0\1\60\1\0\1\60"+
    "\1\0\3\60\1\0\2\60\1\0\1\60\2\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\1\60"+
    "\1\0\2\60\1\0\1\60\2\0\4\60\1\0\7\60"+
    "\1\0\4\60\1\0\4\60\1\0\1\60\1\0\12\60"+
    "\1\0\21\60\5\0\3\60\1\0\5\60\1\0\21\60"+
    "\164\0\32\60\6\0\32\60\6\0\32\60\166\0\327\60"+
    "\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0\u0131\60"+
    "\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\14\4\1\1"+
    "\1\23\1\24\1\1\1\23\1\24\1\23\1\25\3\0"+
    "\1\26\1\0\1\2\1\16\2\0\1\27\1\30\1\0"+
    "\1\31\1\32\6\4\1\33\1\34\3\4\1\35\4\4"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\3\0\2\2\2\0\1\16\1\0\1\45\3\4\1\46"+
    "\3\4\1\47\2\4\1\50\2\4\1\51\4\0\2\4"+
    "\1\52\3\4\1\53\1\54\1\4\1\55\1\56\3\0"+
    "\1\57\1\60\1\4\1\61\1\4\1\62\1\4\1\63"+
    "\2\0\1\4\1\64\1\65\1\66\1\0\1\67\1\0"+
    "\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\310"+
    "\0\u015e\0\u0190\0\310\0\310\0\310\0\u01c2\0\u01f4\0\310"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\310\0\u0320\0\310"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\310\0\u073a\0\u076c\0\u079e"+
    "\0\310\0\u0258\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\310"+
    "\0\u08ca\0\310\0\310\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u015e\0\u015e\0\u0a28\0\u0a5a\0\u0a8c\0\u015e\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\310\0\310\0\310\0\310"+
    "\0\310\0\310\0\310\0\u0bb8\0\u0bea\0\u0c1c\0\310\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0cb2\0\u0ce4\0\u015e\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u015e\0\u0dac\0\u0dde\0\u0e10\0\u015e\0\u0e42\0\u0e74\0\u015e"+
    "\0\u0ea6\0\u0ed8\0\310\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u015e\0\u1036\0\u1068\0\u109a\0\u015e\0\u015e\0\u10cc"+
    "\0\u015e\0\u015e\0\u10fe\0\u1130\0\u1162\0\310\0\u015e\0\u1194"+
    "\0\u015e\0\u11c6\0\u015e\0\u11f8\0\310\0\u122a\0\u125c\0\u128e"+
    "\0\u015e\0\u015e\0\310\0\u12c0\0\u015e\0\u12f2\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\11"+
    "\1\34\1\35\2\11\1\36\1\37\1\40\1\41\2\11"+
    "\1\42\1\43\1\44\3\11\1\5\2\11\1\45\1\11"+
    "\1\46\2\5\2\47\2\5\4\47\1\50\41\47\1\51"+
    "\7\47\2\52\2\5\1\52\1\53\44\52\1\51\7\52"+
    "\62\54\63\0\3\6\103\0\1\55\42\0\1\11\12\0"+
    "\1\11\5\0\23\11\1\0\4\11\1\0\1\11\34\0"+
    "\1\56\2\0\1\57\1\0\1\60\34\0\1\61\65\0"+
    "\1\62\1\0\1\24\56\0\1\63\1\62\1\0\1\24"+
    "\61\0\1\64\53\0\1\65\65\0\1\64\1\0\1\24"+
    "\10\0\1\66\20\0\1\66\14\0\1\67\16\0\1\70"+
    "\1\0\23\67\1\0\4\67\27\0\1\71\1\72\1\55"+
    "\60\0\1\73\42\0\1\11\12\0\1\11\5\0\11\11"+
    "\1\74\11\11\1\0\4\11\1\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\3\11\1\75\17\11\1\0\4\11"+
    "\1\0\1\11\7\0\1\11\12\0\1\11\5\0\10\11"+
    "\1\76\1\77\10\11\1\100\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\1\101\22\11\1\0"+
    "\4\11\1\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\4\11\1\102\11\11\1\103\4\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\12\11\1\104"+
    "\10\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\12\11\1\105\5\11\1\106\2\11\1\0"+
    "\4\11\1\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\15\11\1\107\5\11\1\0\4\11\1\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\3\11\1\110\17\11\1\0"+
    "\4\11\1\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\14\11\1\111\6\11\1\0\4\11\1\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\6\11\1\112\6\11\1\113"+
    "\5\11\1\0\4\11\1\0\1\11\7\0\1\11\1\0"+
    "\1\114\10\0\1\11\5\0\23\11\1\0\4\11\1\0"+
    "\1\11\60\0\1\115\2\0\2\47\2\0\4\47\1\0"+
    "\41\47\1\0\7\47\10\0\1\116\123\0\1\117\1\0"+
    "\1\120\1\0\1\121\3\0\2\52\2\0\1\52\1\0"+
    "\44\52\1\0\7\52\5\0\1\122\64\0\1\123\112\0"+
    "\1\124\65\0\1\125\55\0\1\126\20\0\2\63\1\127"+
    "\1\130\56\63\21\0\1\64\10\0\1\66\20\0\1\66"+
    "\6\0\13\65\1\131\46\65\14\0\1\132\1\0\1\132"+
    "\2\0\1\133\46\0\1\67\12\0\1\67\5\0\23\67"+
    "\1\0\4\67\1\0\1\67\7\0\1\134\20\0\23\134"+
    "\1\0\4\134\11\0\1\11\12\0\1\11\5\0\2\11"+
    "\1\135\20\11\1\0\4\11\1\0\1\11\7\0\1\11"+
    "\12\0\1\11\5\0\5\11\1\136\11\11\1\137\3\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\16\11\1\140\4\11\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\2\11\1\141\20\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\7\11\1\142\13\11\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\10\11\1\143\12\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\12\11\1\144\10\11\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\17\11\1\145\3\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\10\11\1\146\12\11\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\17\11\1\147\3\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\10\11\1\150\12\11\1\0\4\11\1\0\1\11"+
    "\7\0\1\11\12\0\1\11\5\0\3\11\1\151\17\11"+
    "\1\0\4\11\1\0\1\11\7\0\1\11\12\0\1\11"+
    "\5\0\20\11\1\152\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\153\1\0\56\153\50\0\1\154\53\0\1\155"+
    "\66\0\1\156\15\0\1\127\57\0\13\65\1\131\4\65"+
    "\1\127\41\65\21\0\1\133\46\0\1\134\12\0\1\134"+
    "\4\0\1\157\23\134\1\0\4\134\1\0\1\134\7\0"+
    "\1\11\12\0\1\11\5\0\7\11\1\160\13\11\1\0"+
    "\4\11\1\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\21\11\1\161\1\11\1\0\4\11\1\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\3\11\1\162\3\11\1\163"+
    "\13\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\16\11\1\164\4\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\16\11\1\165"+
    "\4\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\13\11\1\166\7\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\10\11\1\167"+
    "\12\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\20\11\1\170\2\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\11\11\1\171"+
    "\11\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\3\11\1\172\17\11\1\0\4\11\1\0"+
    "\1\11\41\0\1\173\63\0\1\174\52\0\1\175\54\0"+
    "\1\176\41\0\1\11\12\0\1\11\5\0\11\11\1\177"+
    "\11\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\3\11\1\200\17\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\4\11\1\201"+
    "\16\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\17\11\1\202\3\11\1\0\4\11\1\0"+
    "\1\11\7\0\1\11\12\0\1\11\5\0\3\11\1\203"+
    "\17\11\1\0\4\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\5\0\15\11\1\204\5\11\1\0\4\11\1\0"+
    "\1\11\32\0\1\205\62\0\1\206\70\0\1\207\26\0"+
    "\1\11\12\0\1\11\5\0\3\11\1\210\17\11\1\0"+
    "\4\11\1\0\1\11\7\0\1\11\12\0\1\11\5\0"+
    "\16\11\1\211\4\11\1\0\4\11\1\0\1\11\7\0"+
    "\1\11\12\0\1\11\5\0\11\11\1\212\11\11\1\0"+
    "\4\11\1\0\1\11\41\0\1\213\70\0\1\214\20\0"+
    "\1\11\12\0\1\11\5\0\11\11\1\215\11\11\1\0"+
    "\4\11\1\0\1\11\41\0\1\216\52\0\1\217\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\2\1\3\11\2\1\1\11"+
    "\5\1\1\11\1\1\1\11\24\1\1\11\3\0\1\11"+
    "\1\0\2\1\2\0\1\1\1\11\1\0\2\11\20\1"+
    "\1\0\7\11\3\0\1\11\1\1\2\0\1\1\1\0"+
    "\16\1\1\11\4\0\13\1\3\0\1\11\6\1\1\11"+
    "\2\0\3\1\1\11\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    String customDelimiter = "";
    ComplexSymbolFactory factory;

    private void setDelimiter(String openingDelimiter) {
        switch (openingDelimiter) {
            case "[":
                this.customDelimiter = "]";
                break;
            case "{":
                this.customDelimiter = "}";
                break;
            case "<":
                this.customDelimiter = ">";
                break;
            case "(":
                this.customDelimiter = ")";
                break;
            default:
                this.customDelimiter = openingDelimiter;
                break;
        }
    }

    private Symbol symbol(String name, int type) {
        Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));

        return factory.newSymbol(name, type, start, end);
    }

    private Symbol symbol(String name, int type, Object value) {
        Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));

        return factory.newSymbol(name, type, start, end, value);
    }

    private Symbol symbol(String name, int type, Object value, int buflen) {
        Location start = new Location(yyline + 1, yycolumn + yylength() - buflen, (int) (yychar + yylength() - buflen));
        Location end = new Location(yyline + 1, yycolumn + yylength(), (int) (yychar + yylength()));
        return factory.newSymbol(name, type, start, end, value);
    }

    public PLSQLScanner(java.io.Reader in, ComplexSymbolFactory factory) {
        this(in);
        this.factory = factory;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PLSQLScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     Location start = new Location(yyline + 1, yycolumn + 1, (int) yychar);
    Location end = new Location(yyline + 1, yycolumn + 1, (int) (yychar + 1));
    return factory.newSymbol("EOF", sym.EOF, start, end);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character '" + yytext() + "' on line " + yyline + " column " + yycolumn);
            }
          // fall through
          case 57: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 58: break;
          case 3:
            { string.setLength(0); yybegin(DQ_STRING_LITERAL);
            }
          // fall through
          case 59: break;
          case 4:
            { return symbol("identifier", sym.IDENTIFIER, new Identifier(yytext()));
            }
          // fall through
          case 60: break;
          case 5:
            { string.setLength(0); yybegin(SQ_STRING_LITERAL);
            }
          // fall through
          case 61: break;
          case 6:
            { return symbol("(", sym.LEFT_PARENTHESIS);
            }
          // fall through
          case 62: break;
          case 7:
            { return symbol(")", sym.RIGHT_PARENTHESIS);
            }
          // fall through
          case 63: break;
          case 8:
            { return symbol("mult", sym.MULTIPLICATION_OPERATOR);
            }
          // fall through
          case 64: break;
          case 9:
            { return symbol("add", sym.ADDITION_OPERATOR);
            }
          // fall through
          case 65: break;
          case 10:
            { return symbol("comma", sym.COMMA);
            }
          // fall through
          case 66: break;
          case 11:
            { return symbol("sub", sym.SUBTRACTION_OPERATOR);
            }
          // fall through
          case 67: break;
          case 12:
            { return symbol("dot", sym.DOT);
            }
          // fall through
          case 68: break;
          case 13:
            { return symbol("div", sym.DIVISION_OPERATOR);
            }
          // fall through
          case 69: break;
          case 14:
            { return symbol("number", sym.NUMBER_LITERAL, yytext());
            }
          // fall through
          case 70: break;
          case 15:
            { return symbol("semi", sym.SEMI);
            }
          // fall through
          case 71: break;
          case 16:
            { return symbol("le", sym.LESS_THAN_OPERATOR);
            }
          // fall through
          case 72: break;
          case 17:
            { return symbol("eq", sym.EQUAL_OPERATOR);
            }
          // fall through
          case 73: break;
          case 18:
            { return symbol("gt", sym.GREATER_THAN_OPERATOR);
            }
          // fall through
          case 74: break;
          case 19:
            { string.append(yytext());
            }
          // fall through
          case 75: break;
          case 20:
            { yybegin(YYINITIAL); return symbol("string", sym.STRING_LITERAL, string.toString(), string.length());
            }
          // fall through
          case 76: break;
          case 21:
            { return symbol("neq", sym.NOT_EQUAL_OPERATOR);
            }
          // fall through
          case 77: break;
          case 22:
            { return symbol("exp", sym.EXPONENTIATION_OPERATOR);
            }
          // fall through
          case 78: break;
          case 23:
            { return symbol("namedcursor", sym.NAMED_CURSOR, yytext().substring(1));
            }
          // fall through
          case 79: break;
          case 24:
            { return symbol("assign", sym.ASSIGNMENT_OPERATOR);
            }
          // fall through
          case 80: break;
          case 25:
            { return symbol("leq", sym.LESS_THAN_OR_EQUAL_OPERATOR);
            }
          // fall through
          case 81: break;
          case 26:
            { return symbol("gtq", sym.GREATER_THAN_OR_EQUAL_OPERATOR);
            }
          // fall through
          case 82: break;
          case 27:
            { return symbol("if", sym.IF);
            }
          // fall through
          case 83: break;
          case 28:
            { return symbol("is", sym.IS_OPERATOR);
            }
          // fall through
          case 84: break;
          case 29:
            { return symbol("booloperator", sym.OR_OPERATOR);
            }
          // fall through
          case 85: break;
          case 30:
            { return symbol("concat", sym.CONCATENATION_OPERATOR);
            }
          // fall through
          case 86: break;
          case 31:
            { string.append('\'');
            }
          // fall through
          case 87: break;
          case 32:
            { string.append('\\');
            }
          // fall through
          case 88: break;
          case 33:
            { string.append('\n');
            }
          // fall through
          case 89: break;
          case 34:
            { string.append('\r');
            }
          // fall through
          case 90: break;
          case 35:
            { string.append('"');
            }
          // fall through
          case 91: break;
          case 36:
            { if (yytext().substring(0, 1).equals(customDelimiter)) {
          yybegin(YYINITIAL);
          return symbol("string", sym.STRING_LITERAL, string.toString(), string.length());
      } else {
          string.append(yytext());
      }
            }
          // fall through
          case 92: break;
          case 37:
            { return symbol("booloperator", sym.AND_OPERATOR);
            }
          // fall through
          case 93: break;
          case 38:
            { return symbol("end", sym.END);
            }
          // fall through
          case 94: break;
          case 39:
            { return symbol("not", sym.NOT_OPERATOR);
            }
          // fall through
          case 95: break;
          case 40:
            { return symbol("implicitcursor", sym.IMPLICIT_CURSOR);
            }
          // fall through
          case 96: break;
          case 41:
            { string.setLength(0); this.setDelimiter(yytext().substring(2)); yybegin(CS_STRING_LITERAL);
            }
          // fall through
          case 97: break;
          case 42:
            { return symbol("else", sym.ELSE);
            }
          // fall through
          case 98: break;
          case 43:
            { return symbol("loop", sym.LOOP);
            }
          // fall through
          case 99: break;
          case 44:
            { return symbol("null", sym.NULL_LITERAL);
            }
          // fall through
          case 100: break;
          case 45:
            { return symbol("then", sym.THEN);
            }
          // fall through
          case 101: break;
          case 46:
            { return symbol("boolliteral", sym.BOOLEAN_LITERAL, true);
            }
          // fall through
          case 102: break;
          case 47:
            { String label = yytext(); return symbol("label", sym.LABEL, label.substring(2, label.length() - 2));
            }
          // fall through
          case 103: break;
          case 48:
            { return symbol("begin", sym.BEGIN);
            }
          // fall through
          case 104: break;
          case 49:
            { return symbol("elsif", sym.ELSIF);
            }
          // fall through
          case 105: break;
          case 50:
            { return symbol("boolliteral", sym.BOOLEAN_LITERAL, false);
            }
          // fall through
          case 106: break;
          case 51:
            { return symbol("found", sym.FOUND_OPERATOR);
            }
          // fall through
          case 107: break;
          case 52:
            { return symbol("exists", sym.EXISTS_OPERATOR);
            }
          // fall through
          case 108: break;
          case 53:
            { return symbol("return", sym.RETURN);
            }
          // fall through
          case 109: break;
          case 54:
            { return symbol("isopen", sym.ISOPEN_OPERATOR);
            }
          // fall through
          case 110: break;
          case 55:
            { return symbol("between", sym.BETWEEN_OPERATOR);
            }
          // fall through
          case 111: break;
          case 56:
            { return symbol("notfound", sym.NOTFOUND_OPERATOR);
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
