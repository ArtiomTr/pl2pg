
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java.util.List;
import java.util.ArrayList;
import org.example.plsql.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PLSQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PLSQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PLSQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PLSQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\002\000\002\013\003\000\002\012\006" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\006\000\002" +
    "\006\007\000\002\007\013\000\002\010\007\000\002\010" +
    "\002\000\002\011\004\000\002\011\002\000\002\015\003" +
    "\000\002\016\005\000\002\016\003\000\002\017\005\000" +
    "\002\017\003\000\002\020\004\000\002\020\003\000\002" +
    "\027\007\000\002\027\010\000\002\027\003\000\002\030" +
    "\005\000\002\030\006\000\002\030\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\024\004\000\002\024\004\000\002\024\003\000" +
    "\002\025\005\000\002\025\003\000\002\031\003\000\002" +
    "\031\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\010" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\165\001\002\000\006\002\000\004\010\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\006\002\uffff\004\uffff\001" +
    "\002\000\012\005\ufffa\006\ufffa\007\ufffa\056\ufffa\001\002" +
    "\000\012\005\020\006\016\007\021\056\014\001\002\000" +
    "\016\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\056\ufff8" +
    "\001\002\000\016\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\056\ufff9\001\002\000\004\022\162\001\002\000\016" +
    "\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\056\ufffb\001" +
    "\002\000\012\005\ufffa\006\ufffa\007\ufffa\056\ufffa\001\002" +
    "\000\016\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\056" +
    "\ufff7\001\002\000\004\015\155\001\002\000\030\014\025" +
    "\020\034\032\033\033\041\040\031\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\050\010\uffd5" +
    "\015\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\001\002\000" +
    "\036\010\uffe3\015\uffe3\021\uffe3\023\140\024\137\025\143" +
    "\026\142\027\136\030\141\036\uffe3\037\uffe3\040\uffe3\043" +
    "\uffe3\044\135\001\002\000\010\045\134\046\133\047\132" +
    "\001\002\000\010\045\uffce\046\uffce\047\uffce\001\002\000" +
    "\052\010\uffcc\015\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc" +
    "\044\uffcc\001\002\000\054\010\uffcd\015\uffcd\017\125\021" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\001\002\000\012" +
    "\010\uffef\015\uffef\021\uffef\037\123\001\002\000\030\014" +
    "\025\020\034\032\033\033\041\040\031\050\051\051\032" +
    "\052\042\053\026\054\043\056\027\001\002\000\052\010" +
    "\uffca\015\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca" +
    "\001\002\000\026\014\025\020\034\032\033\033\041\050" +
    "\051\051\032\052\042\053\026\054\043\056\027\001\002" +
    "\000\030\014\025\020\034\032\033\033\041\040\031\050" +
    "\051\051\032\052\042\053\026\054\043\056\027\001\002" +
    "\000\014\010\uffed\015\uffed\021\uffed\036\115\037\uffed\001" +
    "\002\000\004\010\100\001\002\000\044\010\uffdc\015\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\073\032\074\033\072\036\uffdc\037\uffdc\040\uffdc" +
    "\043\uffdc\044\uffdc\001\002\000\052\010\uffd2\015\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\070\043\uffd2\044\uffd2\001\002\000\026" +
    "\014\025\020\034\032\033\033\041\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\052\010\uffc9" +
    "\015\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\001" +
    "\002\000\010\045\uffcf\046\uffcf\047\uffcf\001\002\000\050" +
    "\010\uffd8\015\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\064" +
    "\035\063\036\uffd8\037\uffd8\040\uffd8\043\uffd8\044\uffd8\001" +
    "\002\000\052\010\uffd0\015\uffd0\021\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\043\uffd0\044\uffd0\001\002\000\014\010\uffeb\015\uffeb\021" +
    "\uffeb\036\uffeb\037\uffeb\001\002\000\020\010\uffe6\015\uffe6" +
    "\021\uffe6\036\uffe6\037\uffe6\040\052\043\053\001\002\000" +
    "\014\010\uffe9\015\uffe9\021\uffe9\036\uffe9\037\uffe9\001\002" +
    "\000\052\010\uffcb\015\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043" +
    "\uffcb\044\uffcb\001\002\000\004\043\057\001\002\000\026" +
    "\014\025\020\034\032\033\033\041\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\004\036\055" +
    "\001\002\000\026\014\025\020\034\032\033\033\041\050" +
    "\051\051\032\052\042\053\026\054\043\056\027\001\002" +
    "\000\014\010\uffe8\015\uffe8\021\uffe8\036\uffe8\037\uffe8\001" +
    "\002\000\026\014\025\020\034\032\033\033\041\050\051" +
    "\051\032\052\042\053\026\054\043\056\027\001\002\000" +
    "\004\036\061\001\002\000\026\014\025\020\034\032\033" +
    "\033\041\050\051\051\032\052\042\053\026\054\043\056" +
    "\027\001\002\000\014\010\uffe7\015\uffe7\021\uffe7\036\uffe7" +
    "\037\uffe7\001\002\000\026\014\025\020\034\032\033\033" +
    "\041\050\051\051\032\052\042\053\026\054\043\056\027" +
    "\001\002\000\026\014\025\020\034\032\033\033\041\050" +
    "\051\051\032\052\042\053\026\054\043\056\027\001\002" +
    "\000\050\010\uffd7\015\uffd7\021\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\044" +
    "\uffd7\001\002\000\050\010\uffd6\015\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\043\uffd6\044\uffd6\001\002\000\050\010\uffd3\015\uffd3\021" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\044\uffd3\001\002\000\022\014\025" +
    "\020\034\050\051\051\032\052\042\053\026\054\043\056" +
    "\027\001\002\000\052\010\uffd1\015\uffd1\021\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\043\uffd1\044\uffd1\001\002\000\026\014\025\020" +
    "\034\032\033\033\041\050\051\051\032\052\042\053\026" +
    "\054\043\056\027\001\002\000\026\014\025\020\034\032" +
    "\033\033\041\050\051\051\032\052\042\053\026\054\043" +
    "\056\027\001\002\000\026\014\025\020\034\032\033\033" +
    "\041\050\051\051\032\052\042\053\026\054\043\056\027" +
    "\001\002\000\050\010\uffdb\015\uffdb\021\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\064\035\063\036\uffdb\037\uffdb\040\uffdb\043" +
    "\uffdb\044\uffdb\001\002\000\050\010\uffd9\015\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\064\035\063\036\uffd9\037\uffd9" +
    "\040\uffd9\043\uffd9\044\uffd9\001\002\000\050\010\uffda\015" +
    "\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\064\035\063\036" +
    "\uffda\037\uffda\040\uffda\043\uffda\044\uffda\001\002\000\016" +
    "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\056\ufffa\001" +
    "\002\000\016\005\ufff2\006\016\007\021\011\ufff2\012\ufff2" +
    "\056\014\001\002\000\010\005\ufff0\011\105\012\104\001" +
    "\002\000\004\005\112\001\002\000\012\005\ufffa\006\ufffa" +
    "\007\ufffa\056\ufffa\001\002\000\030\014\025\020\034\032" +
    "\033\033\041\040\031\050\051\051\032\052\042\053\026" +
    "\054\043\056\027\001\002\000\004\010\107\001\002\000" +
    "\016\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\056\ufffa" +
    "\001\002\000\016\005\ufff3\006\016\007\021\011\ufff3\012" +
    "\ufff3\056\014\001\002\000\012\005\ufff1\006\016\007\021" +
    "\056\014\001\002\000\004\007\113\001\002\000\004\015" +
    "\114\001\002\000\016\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\012\ufff4\056\ufff4\001\002\000\030\014\025\020\034\032" +
    "\033\033\041\040\031\050\051\051\032\052\042\053\026" +
    "\054\043\056\027\001\002\000\014\010\uffec\015\uffec\021" +
    "\uffec\036\uffec\037\uffec\001\002\000\004\021\120\001\002" +
    "\000\052\010\uffc4\015\uffc4\021\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043" +
    "\uffc4\044\uffc4\001\002\000\050\010\uffd4\015\uffd4\021\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\043\uffd4\044\uffd4\001\002\000\014\010\uffea\015" +
    "\uffea\021\uffea\036\uffea\037\uffea\001\002\000\030\014\025" +
    "\020\034\032\033\033\041\040\031\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\014\010\uffee" +
    "\015\uffee\021\uffee\036\115\037\uffee\001\002\000\004\042" +
    "\126\001\002\000\004\020\127\001\002\000\030\014\025" +
    "\020\034\032\033\033\041\040\031\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\004\021\131" +
    "\001\002\000\052\010\uffc8\015\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\043\uffc8\044\uffc8\001\002\000\052\010\uffc5\015\uffc5" +
    "\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\001\002\000" +
    "\052\010\uffc6\015\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6" +
    "\044\uffc6\001\002\000\052\010\uffc7\015\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\001\002\000\006\040\152" +
    "\050\153\001\002\000\026\014\025\020\034\032\033\033" +
    "\041\050\051\051\032\052\042\053\026\054\043\056\027" +
    "\001\002\000\026\014\025\020\034\032\033\033\041\050" +
    "\051\051\032\052\042\053\026\054\043\056\027\001\002" +
    "\000\026\014\025\020\034\032\033\033\041\050\051\051" +
    "\032\052\042\053\026\054\043\056\027\001\002\000\026" +
    "\014\025\020\034\032\033\033\041\050\051\051\032\052" +
    "\042\053\026\054\043\056\027\001\002\000\026\014\025" +
    "\020\034\032\033\033\041\050\051\051\032\052\042\053" +
    "\026\054\043\056\027\001\002\000\026\014\025\020\034" +
    "\032\033\033\041\050\051\051\032\052\042\053\026\054" +
    "\043\056\027\001\002\000\044\010\uffe2\015\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\073\032\074\033\072\036\uffe2\037\uffe2\040\uffe2\043\uffe2" +
    "\044\uffe2\001\002\000\044\010\uffe0\015\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\073" +
    "\032\074\033\072\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044" +
    "\uffe0\001\002\000\044\010\uffdf\015\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\073\032" +
    "\074\033\072\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf" +
    "\001\002\000\044\010\uffde\015\uffde\021\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\073\032\074" +
    "\033\072\036\uffde\037\uffde\040\uffde\043\uffde\044\uffde\001" +
    "\002\000\044\010\uffdd\015\uffdd\021\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\073\032\074\033" +
    "\072\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd\001\002" +
    "\000\044\010\uffe1\015\uffe1\021\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\073\032\074\033\072" +
    "\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\004\050\154\001\002\000\020\010\uffe5\015\uffe5\021\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\043\uffe5\001\002\000\020\010" +
    "\uffe4\015\uffe4\021\uffe4\036\uffe4\037\uffe4\040\uffe4\043\uffe4" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002\000\012\005" +
    "\157\006\016\007\021\056\014\001\002\000\004\006\160" +
    "\001\002\000\004\015\161\001\002\000\016\005\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\012\ufff5\056\ufff5\001\002\000\030" +
    "\014\025\020\034\032\033\033\041\040\031\050\051\051" +
    "\032\052\042\053\026\054\043\056\027\001\002\000\004" +
    "\015\164\001\002\000\016\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\012\ufff6\056\ufff6\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\003\014\004\001\001\000\002\001" +
    "\001\000\006\012\005\013\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\010\001\001\000\012\004" +
    "\014\005\012\006\011\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\015\035\016\027\017\034\020\045\021\022\022" +
    "\036\023\043\024\021\025\037\026\044\027\047\030\046" +
    "\031\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\121\021\022\022" +
    "\036\023\043\024\021\025\037\026\044\027\047\030\046" +
    "\031\023\001\001\000\002\001\001\000\012\024\120\025" +
    "\037\026\044\031\023\001\001\000\034\015\116\016\027" +
    "\017\034\020\045\021\022\022\036\023\043\024\021\025" +
    "\037\026\044\027\047\030\046\031\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\066\025\037\026\044\031\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\022\022\036\023\043\024\021\025\037\026\044\030\053" +
    "\031\023\001\001\000\002\001\001\000\022\021\022\022" +
    "\036\023\043\024\021\025\037\026\044\030\055\031\023" +
    "\001\001\000\002\001\001\000\022\021\022\022\036\023" +
    "\043\024\021\025\037\026\044\030\057\031\023\001\001" +
    "\000\002\001\001\000\022\021\022\022\036\023\043\024" +
    "\021\025\037\026\044\030\061\031\023\001\001\000\002" +
    "\001\001\000\012\024\065\025\037\026\044\031\023\001" +
    "\001\000\012\024\064\025\037\026\044\031\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\070\031\023\001\001\000\002\001\001\000\014" +
    "\023\076\024\021\025\037\026\044\031\023\001\001\000" +
    "\014\023\075\024\021\025\037\026\044\031\023\001\001" +
    "\000\014\023\074\024\021\025\037\026\044\031\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\100\001\001\000\014\004\014\005\012\006" +
    "\011\007\016\010\101\001\001\000\004\011\102\001\001" +
    "\000\002\001\001\000\004\003\110\001\001\000\034\015" +
    "\105\016\027\017\034\020\045\021\022\022\036\023\043" +
    "\024\021\025\037\026\044\027\047\030\046\031\023\001" +
    "\001\000\002\001\001\000\004\003\107\001\001\000\012" +
    "\004\014\005\012\006\011\007\016\001\001\000\012\004" +
    "\014\005\012\006\011\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\115\021" +
    "\022\022\036\023\043\024\021\025\037\026\044\027\047" +
    "\030\046\031\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\123\020\045\021\022\022\036\023\043\024" +
    "\021\025\037\026\044\027\047\030\046\031\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\015\127\016\027\017\034\020\045\021\022\022\036" +
    "\023\043\024\021\025\037\026\044\027\047\030\046\031" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\150\023\043\024\021\025\037\026\044" +
    "\031\023\001\001\000\016\022\147\023\043\024\021\025" +
    "\037\026\044\031\023\001\001\000\016\022\146\023\043" +
    "\024\021\025\037\026\044\031\023\001\001\000\016\022" +
    "\145\023\043\024\021\025\037\026\044\031\023\001\001" +
    "\000\016\022\144\023\043\024\021\025\037\026\044\031" +
    "\023\001\001\000\016\022\143\023\043\024\021\025\037" +
    "\026\044\031\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\014\005\012" +
    "\006\011\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\015\162\016\027\017\034" +
    "\020\045\021\022\022\036\023\043\024\021\025\037\026" +
    "\044\027\047\030\046\031\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PLSQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PLSQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PLSQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PLSQLParser$actions {
  private final PLSQLParser parser;

  /** Constructor */
  CUP$PLSQLParser$actions(PLSQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action_part00000000(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PLSQLParser$result;

      /* select the action based on the action number */
      switch (CUP$PLSQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		RESULT = start_val;
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PLSQLParser$parser.done_parsing();
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= plsql_block_list 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Block> b = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // plsql_block_list ::= plsql_block_list plsql_block 
            {
              List<Block> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Block> l = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // plsql_block_list ::= 
            {
              List<Block> RESULT =null;
		 RESULT = new ArrayList<Block>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // plsql_block ::= body 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Block(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block",9, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_list END SEMI 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new Body(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		AssignmentStatement s = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		LoopStatement s = (LoopStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment_statement ::= IDENTIFIER ASSIGNMENT_OPERATOR expression SEMI 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new AssignmentStatement(id, value); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",3, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // loop_statement ::= LOOP statement_list END LOOP SEMI 
            {
              LoopStatement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new LoopStatement(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("loop_statement",4, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if_statement ::= IF expression THEN statement_list elsif_list else_block END IF SEMI 
            {
              IfStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<IfStatement.Elsif> el = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		IfStatement.Else alt = (IfStatement.Else)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new IfStatement(cond, sl, el, alt); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("if_statement",5, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elsif_list ::= elsif_list ELSIF expression THEN statement_list 
            {
              List<IfStatement.Elsif> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<IfStatement.Elsif> l = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(new IfStatement.Elsif(cond, sl)); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("elsif_list",6, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elsif_list ::= 
            {
              List<IfStatement.Elsif> RESULT =null;
		 RESULT = new ArrayList<IfStatement.Elsif>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("elsif_list",6, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else_block ::= ELSE statement_list 
            {
              IfStatement.Else RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new IfStatement.Else(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("else_block",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_block ::= 
            {
              IfStatement.Else RESULT =null;

              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("else_block",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= boolean_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_or_expression ::= boolean_or_expression OR_OPERATOR boolean_and_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_or_expression ::= boolean_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_and_expression ::= boolean_and_expression AND_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_and_expression ::= boolean_not_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_not_expression ::= NOT_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_not_expression ::= boolean_between_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_between_expression ::= boolean_is_expression BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BetweenExpression(expr, l, r); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolean_between_expression ::= boolean_is_expression NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolean_between_expression ::= boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolean_is_expression ::= comparison_expression IS_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolean_is_expression ::= comparison_expression IS_OPERATOR NOT_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolean_is_expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparison_expression ::= comparison_expression LESS_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparison_expression ::= comparison_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparison_expression ::= comparison_expression GREATER_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparison_expression ::= comparison_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparison_expression ::= comparison_expression EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparison_expression ::= comparison_expression NOT_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparison_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additive_expression ::= additive_expression ADDITION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // additive_expression ::= additive_expression SUBTRACTION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // additive_expression ::= additive_expression CONCATENATION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicative_expression ::= multiplicative_expression MULTIPLICATION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicative_expression ::= multiplicative_expression DIVISION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // multiplicative_expression ::= unary_numeric_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unary_numeric_expression ::= ADDITION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unary_numeric_expression ::= SUBTRACTION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unary_numeric_expression ::= exponentiation_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exponentiation_expression ::= exponentiation_expression EXPONENTIATION_OPERATOR expression_atom 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exponentiation_expression ::= expression_atom 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cursor ::= NAMED_CURSOR 
            {
              Cursor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NamedCursor(c); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",23, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cursor ::= IMPLICIT_CURSOR 
            {
              Cursor RESULT =null;
		 RESULT = new ImplicitCursor(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",23, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_atom ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new ExpressionIdentifier(id); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_atom ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_atom ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_atom ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new StringLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_atom ::= NUMBER_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NumberLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_atom ::= IDENTIFIER DOT EXISTS_OPERATOR LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Identifier collection = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CollectionExistExpression(collection, index); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression_atom ::= cursor FOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression_atom ::= cursor ISOPEN_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_atom ::= cursor NOTFOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_atom ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PLSQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
              return CUP$PLSQLParser$do_action_part00000000(
                               CUP$PLSQLParser$act_num,
                               CUP$PLSQLParser$parser,
                               CUP$PLSQLParser$stack,
                               CUP$PLSQLParser$top);
    }
}

}
