
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.example.plsql.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PLSQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PLSQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PLSQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PLSQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\002\000\002\017\003\000\002\016\006" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\006\000\002\006\007\000\002\007\013\000\002\012" +
    "\011\000\002\012\010\000\002\014\004\000\002\014\003" +
    "\000\002\013\006\000\002\015\004\000\002\015\002\000" +
    "\002\010\007\000\002\010\002\000\002\011\004\000\002" +
    "\011\002\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\004" +
    "\000\002\024\003\000\002\033\007\000\002\033\010\000" +
    "\002\033\003\000\002\034\005\000\002\034\006\000\002" +
    "\034\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\004\000\002\030" +
    "\004\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\035\003\000\002\035\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\010\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\212\001\002\000\006\002\000\004\010\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\006\002\uffff\004\uffff\001" +
    "\002\000\014\005\ufffa\006\ufffa\007\ufffa\015\ufffa\060\ufffa" +
    "\001\002\000\014\005\021\006\012\007\015\015\017\060" +
    "\020\001\002\000\014\005\ufffa\006\ufffa\007\ufffa\015\ufffa" +
    "\060\ufffa\001\002\000\022\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\012\ufff6\015\ufff6\016\ufff6\060\ufff6\001\002\000\022" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\060\ufff8\001\002\000\030\014\031\022\040\034\037" +
    "\035\045\042\036\052\055\053\035\054\046\055\032\056" +
    "\047\060\033\001\002\000\020\005\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\012\ufffb\015\ufffb\060\ufffb\001\002\000\032\014" +
    "\031\016\150\022\040\034\037\035\045\042\036\052\055" +
    "\053\035\054\046\055\032\056\047\060\033\001\002\000" +
    "\004\024\025\001\002\000\004\017\024\001\002\000\022" +
    "\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\015\ufff7\016" +
    "\ufff7\060\ufff7\001\002\000\022\005\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\015\ufff9\016\ufff9\060\ufff9\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\030\014\031\022\040" +
    "\034\037\035\045\042\036\052\055\053\035\054\046\055" +
    "\032\056\047\060\033\001\002\000\052\010\uffcd\016\uffcd" +
    "\017\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\001\002\000" +
    "\040\010\uffdb\016\uffdb\017\uffdb\023\uffdb\025\130\026\126" +
    "\027\133\030\132\031\127\032\131\040\uffdb\041\uffdb\042" +
    "\uffdb\045\uffdb\046\125\001\002\000\010\047\124\050\123" +
    "\051\122\001\002\000\010\047\uffc6\050\uffc6\051\uffc6\001" +
    "\002\000\054\010\uffc4\016\uffc4\017\uffc4\023\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\045\uffc4\046\uffc4\001\002\000\056\010\uffc5\016" +
    "\uffc5\017\uffc5\021\115\023\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\001\002\000\014\010\uffe7\016\uffe7\017\uffe7\023" +
    "\uffe7\041\113\001\002\000\054\010\uffc2\016\uffc2\017\uffc2" +
    "\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\001\002\000" +
    "\030\014\031\022\040\034\037\035\045\042\036\052\055" +
    "\053\035\054\046\055\032\056\047\060\033\001\002\000" +
    "\026\014\031\022\040\034\037\035\045\052\055\053\035" +
    "\054\046\055\032\056\047\060\033\001\002\000\030\014" +
    "\031\022\040\034\037\035\045\042\036\052\055\053\035" +
    "\054\046\055\032\056\047\060\033\001\002\000\016\010" +
    "\uffe5\016\uffe5\017\uffe5\023\uffe5\040\105\041\uffe5\001\002" +
    "\000\004\017\104\001\002\000\046\010\uffd4\016\uffd4\017" +
    "\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\077\034\100\035\076\040\uffd4\041\uffd4\042" +
    "\uffd4\045\uffd4\046\uffd4\001\002\000\054\010\uffca\016\uffca" +
    "\017\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\074\045\uffca\046\uffca\001" +
    "\002\000\026\014\031\022\040\034\037\035\045\052\055" +
    "\053\035\054\046\055\032\056\047\060\033\001\002\000" +
    "\054\010\uffc1\016\uffc1\017\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\045\uffc1\046\uffc1\001\002\000\010\047\uffc7\050\uffc7\051" +
    "\uffc7\001\002\000\052\010\uffd0\016\uffd0\017\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\070\037\067\040\uffd0\041\uffd0" +
    "\042\uffd0\045\uffd0\046\uffd0\001\002\000\054\010\uffc8\016" +
    "\uffc8\017\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\001\002\000\016\010\uffe3\016\uffe3\017\uffe3\023\uffe3\040" +
    "\uffe3\041\uffe3\001\002\000\022\010\uffde\016\uffde\017\uffde" +
    "\023\uffde\040\uffde\041\uffde\042\056\045\057\001\002\000" +
    "\016\010\uffe1\016\uffe1\017\uffe1\023\uffe1\040\uffe1\041\uffe1" +
    "\001\002\000\054\010\uffc3\016\uffc3\017\uffc3\023\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\045\uffc3\046\uffc3\001\002\000\004\045\063" +
    "\001\002\000\026\014\031\022\040\034\037\035\045\052" +
    "\055\053\035\054\046\055\032\056\047\060\033\001\002" +
    "\000\004\040\061\001\002\000\026\014\031\022\040\034" +
    "\037\035\045\052\055\053\035\054\046\055\032\056\047" +
    "\060\033\001\002\000\016\010\uffe0\016\uffe0\017\uffe0\023" +
    "\uffe0\040\uffe0\041\uffe0\001\002\000\026\014\031\022\040" +
    "\034\037\035\045\052\055\053\035\054\046\055\032\056" +
    "\047\060\033\001\002\000\004\040\065\001\002\000\026" +
    "\014\031\022\040\034\037\035\045\052\055\053\035\054" +
    "\046\055\032\056\047\060\033\001\002\000\016\010\uffdf" +
    "\016\uffdf\017\uffdf\023\uffdf\040\uffdf\041\uffdf\001\002\000" +
    "\026\014\031\022\040\034\037\035\045\052\055\053\035" +
    "\054\046\055\032\056\047\060\033\001\002\000\026\014" +
    "\031\022\040\034\037\035\045\052\055\053\035\054\046" +
    "\055\032\056\047\060\033\001\002\000\052\010\uffcf\016" +
    "\uffcf\017\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf\001\002" +
    "\000\052\010\uffce\016\uffce\017\uffce\023\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\045" +
    "\uffce\046\uffce\001\002\000\052\010\uffcb\016\uffcb\017\uffcb" +
    "\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\045\uffcb\046\uffcb\001\002\000\022\014" +
    "\031\022\040\052\055\053\035\054\046\055\032\056\047" +
    "\060\033\001\002\000\054\010\uffc9\016\uffc9\017\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\001\002\000\026" +
    "\014\031\022\040\034\037\035\045\052\055\053\035\054" +
    "\046\055\032\056\047\060\033\001\002\000\026\014\031" +
    "\022\040\034\037\035\045\052\055\053\035\054\046\055" +
    "\032\056\047\060\033\001\002\000\026\014\031\022\040" +
    "\034\037\035\045\052\055\053\035\054\046\055\032\056" +
    "\047\060\033\001\002\000\052\010\uffd3\016\uffd3\017\uffd3" +
    "\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\070\037\067\040\uffd3" +
    "\041\uffd3\042\uffd3\045\uffd3\046\uffd3\001\002\000\052\010" +
    "\uffd1\016\uffd1\017\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\070\037\067\040\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1" +
    "\001\002\000\052\010\uffd2\016\uffd2\017\uffd2\023\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\070\037\067\040\uffd2\041\uffd2\042" +
    "\uffd2\045\uffd2\046\uffd2\001\002\000\022\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\060\ufff5\001" +
    "\002\000\030\014\031\022\040\034\037\035\045\042\036" +
    "\052\055\053\035\054\046\055\032\056\047\060\033\001" +
    "\002\000\016\010\uffe4\016\uffe4\017\uffe4\023\uffe4\040\uffe4" +
    "\041\uffe4\001\002\000\004\023\110\001\002\000\054\010" +
    "\uffbc\016\uffbc\017\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\046\uffbc\001\002\000\052\010\uffcc\016\uffcc\017\uffcc\023" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\045\uffcc\046\uffcc\001\002\000\016\010\uffe2" +
    "\016\uffe2\017\uffe2\023\uffe2\040\uffe2\041\uffe2\001\002\000" +
    "\030\014\031\022\040\034\037\035\045\042\036\052\055" +
    "\053\035\054\046\055\032\056\047\060\033\001\002\000" +
    "\016\010\uffe6\016\uffe6\017\uffe6\023\uffe6\040\105\041\uffe6" +
    "\001\002\000\004\044\116\001\002\000\004\022\117\001" +
    "\002\000\030\014\031\022\040\034\037\035\045\042\036" +
    "\052\055\053\035\054\046\055\032\056\047\060\033\001" +
    "\002\000\004\023\121\001\002\000\054\010\uffc0\016\uffc0" +
    "\017\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0\001" +
    "\002\000\054\010\uffbd\016\uffbd\017\uffbd\023\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\046\uffbd\001\002\000\054\010\uffbe\016" +
    "\uffbe\017\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe" +
    "\001\002\000\054\010\uffbf\016\uffbf\017\uffbf\023\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\045\uffbf\046\uffbf\001\002\000\006\042\142" +
    "\052\143\001\002\000\026\014\031\022\040\034\037\035" +
    "\045\052\055\053\035\054\046\055\032\056\047\060\033" +
    "\001\002\000\026\014\031\022\040\034\037\035\045\052" +
    "\055\053\035\054\046\055\032\056\047\060\033\001\002" +
    "\000\026\014\031\022\040\034\037\035\045\052\055\053" +
    "\035\054\046\055\032\056\047\060\033\001\002\000\026" +
    "\014\031\022\040\034\037\035\045\052\055\053\035\054" +
    "\046\055\032\056\047\060\033\001\002\000\026\014\031" +
    "\022\040\034\037\035\045\052\055\053\035\054\046\055" +
    "\032\056\047\060\033\001\002\000\026\014\031\022\040" +
    "\034\037\035\045\052\055\053\035\054\046\055\032\056" +
    "\047\060\033\001\002\000\046\010\uffda\016\uffda\017\uffda" +
    "\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\077\034\100\035\076\040\uffda\041\uffda\042\uffda" +
    "\045\uffda\046\uffda\001\002\000\046\010\uffd8\016\uffd8\017" +
    "\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\077\034\100\035\076\040\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\046\uffd8\001\002\000\046\010\uffd7\016\uffd7" +
    "\017\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\077\034\100\035\076\040\uffd7\041\uffd7" +
    "\042\uffd7\045\uffd7\046\uffd7\001\002\000\046\010\uffd6\016" +
    "\uffd6\017\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\077\034\100\035\076\040\uffd6\041" +
    "\uffd6\042\uffd6\045\uffd6\046\uffd6\001\002\000\046\010\uffd9" +
    "\016\uffd9\017\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\077\034\100\035\076\040\uffd9" +
    "\041\uffd9\042\uffd9\045\uffd9\046\uffd9\001\002\000\046\010" +
    "\uffd5\016\uffd5\017\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\077\034\100\035\076\040" +
    "\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\001\002\000\004" +
    "\052\144\001\002\000\022\010\uffdd\016\uffdd\017\uffdd\023" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\045\uffdd\001\002\000\022" +
    "\010\uffdc\016\uffdc\017\uffdc\023\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\045\uffdc\001\002\000\010\005\uffef\012\uffef\016\uffef" +
    "\001\002\000\004\016\150\001\002\000\010\005\uffec\012" +
    "\154\016\150\001\002\000\030\014\031\022\040\034\037" +
    "\035\045\042\036\052\055\053\035\054\046\055\032\056" +
    "\047\060\033\001\002\000\004\010\152\001\002\000\012" +
    "\006\012\007\015\015\017\060\020\001\002\000\010\005" +
    "\uffee\012\uffee\016\uffee\001\002\000\012\006\012\007\015" +
    "\015\017\060\020\001\002\000\004\005\157\001\002\000" +
    "\010\005\ufff0\012\ufff0\016\ufff0\001\002\000\004\015\160" +
    "\001\002\000\004\017\161\001\002\000\022\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\060\ufff1" +
    "\001\002\000\004\005\uffed\001\002\000\010\005\uffec\012" +
    "\154\016\150\001\002\000\004\005\165\001\002\000\004" +
    "\015\166\001\002\000\004\017\167\001\002\000\022\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2" +
    "\060\ufff2\001\002\000\004\010\171\001\002\000\020\005" +
    "\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\015\ufffa\060\ufffa" +
    "\001\002\000\020\005\uffea\006\012\007\015\011\uffea\012" +
    "\uffea\015\017\060\020\001\002\000\010\005\uffe8\011\176" +
    "\012\175\001\002\000\004\005\203\001\002\000\014\005" +
    "\ufffa\006\ufffa\007\ufffa\015\ufffa\060\ufffa\001\002\000\030" +
    "\014\031\022\040\034\037\035\045\042\036\052\055\053" +
    "\035\054\046\055\032\056\047\060\033\001\002\000\004" +
    "\010\200\001\002\000\020\005\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\012\ufffa\015\ufffa\060\ufffa\001\002\000\020\005\uffeb" +
    "\006\012\007\015\011\uffeb\012\uffeb\015\017\060\020\001" +
    "\002\000\014\005\uffe9\006\012\007\015\015\017\060\020" +
    "\001\002\000\004\007\204\001\002\000\004\017\205\001" +
    "\002\000\022\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\015\ufff3\016\ufff3\060\ufff3\001\002\000\014\005\207\006" +
    "\012\007\015\015\017\060\020\001\002\000\004\006\210" +
    "\001\002\000\004\017\211\001\002\000\022\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\060\ufff4" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\003\020\004\001\001\000\002\001" +
    "\001\000\006\016\005\017\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\010\001\001\000\014\004" +
    "\015\005\022\006\013\007\021\012\012\001\001\000\004" +
    "\003\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\021\167\022\033\023\040\024\051\025\026\026\042" +
    "\027\047\030\025\031\043\032\050\033\053\034\052\035" +
    "\027\001\001\000\002\001\001\000\040\013\144\014\146" +
    "\021\145\022\033\023\040\024\051\025\026\026\042\027" +
    "\047\030\025\031\043\032\050\033\053\034\052\035\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\021\041" +
    "\022\033\023\040\024\051\025\026\026\042\027\047\030" +
    "\025\031\043\032\050\033\053\034\052\035\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\024\111\025\026\026" +
    "\042\027\047\030\025\031\043\032\050\033\053\034\052" +
    "\035\027\001\001\000\012\030\110\031\043\032\050\035" +
    "\027\001\001\000\034\021\106\022\033\023\040\024\051" +
    "\025\026\026\042\027\047\030\025\031\043\032\050\033" +
    "\053\034\052\035\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\072\031\043\032\050\035\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\025\026\026\042\027" +
    "\047\030\025\031\043\032\050\034\057\035\027\001\001" +
    "\000\002\001\001\000\022\025\026\026\042\027\047\030" +
    "\025\031\043\032\050\034\061\035\027\001\001\000\002" +
    "\001\001\000\022\025\026\026\042\027\047\030\025\031" +
    "\043\032\050\034\063\035\027\001\001\000\002\001\001" +
    "\000\022\025\026\026\042\027\047\030\025\031\043\032" +
    "\050\034\065\035\027\001\001\000\002\001\001\000\012" +
    "\030\071\031\043\032\050\035\027\001\001\000\012\030" +
    "\070\031\043\032\050\035\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\074\035" +
    "\027\001\001\000\002\001\001\000\014\027\102\030\025" +
    "\031\043\032\050\035\027\001\001\000\014\027\101\030" +
    "\025\031\043\032\050\035\027\001\001\000\014\027\100" +
    "\030\025\031\043\032\050\035\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\024\105\025\026\026\042\027\047\030\025\031" +
    "\043\032\050\033\053\034\052\035\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\023\113\024\051\025\026" +
    "\026\042\027\047\030\025\031\043\032\050\033\053\034" +
    "\052\035\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\021\117\022\033\023\040\024" +
    "\051\025\026\026\042\027\047\030\025\031\043\032\050" +
    "\033\053\034\052\035\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\140\027\047\030" +
    "\025\031\043\032\050\035\027\001\001\000\016\026\137" +
    "\027\047\030\025\031\043\032\050\035\027\001\001\000" +
    "\016\026\136\027\047\030\025\031\043\032\050\035\027" +
    "\001\001\000\016\026\135\027\047\030\025\031\043\032" +
    "\050\035\027\001\001\000\016\026\134\027\047\030\025" +
    "\031\043\032\050\035\027\001\001\000\016\026\133\027" +
    "\047\030\025\031\043\032\050\035\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\144\014\162\001\001\000\006\013\155\015\154" +
    "\001\001\000\034\021\150\022\033\023\040\024\051\025" +
    "\026\026\042\027\047\030\025\031\043\032\050\033\053" +
    "\034\052\035\027\001\001\000\002\001\001\000\014\004" +
    "\152\005\022\006\013\007\021\012\012\001\001\000\002" +
    "\001\001\000\014\004\161\005\022\006\013\007\021\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\155\015\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\171\001\001\000\016\004\015" +
    "\005\022\006\013\007\021\010\172\012\012\001\001\000" +
    "\004\011\173\001\001\000\002\001\001\000\004\003\201" +
    "\001\001\000\034\021\176\022\033\023\040\024\051\025" +
    "\026\026\042\027\047\030\025\031\043\032\050\033\053" +
    "\034\052\035\027\001\001\000\002\001\001\000\004\003" +
    "\200\001\001\000\014\004\015\005\022\006\013\007\021" +
    "\012\012\001\001\000\014\004\015\005\022\006\013\007" +
    "\021\012\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\015\005\022\006\013\007" +
    "\021\012\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PLSQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PLSQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PLSQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PLSQLParser$actions {
  private final PLSQLParser parser;

  /** Constructor */
  CUP$PLSQLParser$actions(PLSQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action_part00000000(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PLSQLParser$result;

      /* select the action based on the action number */
      switch (CUP$PLSQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		RESULT = start_val;
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PLSQLParser$parser.done_parsing();
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= plsql_block_list 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Block> b = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // plsql_block_list ::= plsql_block_list plsql_block 
            {
              List<Block> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Block> l = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // plsql_block_list ::= 
            {
              List<Block> RESULT =null;
		 RESULT = new ArrayList<Block>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // plsql_block ::= body 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Block(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_list END SEMI 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new Body(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		AssignmentStatement s = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		LoopStatement s = (LoopStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= case_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		CaseStatement s = (CaseStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assignment_statement ::= IDENTIFIER ASSIGNMENT_OPERATOR expression SEMI 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new AssignmentStatement(id, value); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",3, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // loop_statement ::= LOOP statement_list END LOOP SEMI 
            {
              LoopStatement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new LoopStatement(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("loop_statement",4, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if_statement ::= IF expression THEN statement_list elsif_list else_block END IF SEMI 
            {
              IfStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<IfStatement.Elsif> el = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		IfStatement.Else alt = (IfStatement.Else)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new IfStatement(cond, sl, el, alt); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("if_statement",5, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // case_statement ::= CASE expression case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int selectorleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int selectorright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Expression selector = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new CaseStatement(selector, cl, el); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_statement",8, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // case_statement ::= CASE case_when_list case_else END CASE SEMI 
            {
              CaseStatement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<CaseStatement.When> cl = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		CaseStatement.Else el = (CaseStatement.Else)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new CaseStatement(null, cl, el); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_statement",8, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // case_when_list ::= case_when_list case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<CaseStatement.When> l = (List<CaseStatement.When>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_when_list",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // case_when_list ::= case_when 
            {
              List<CaseStatement.When> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		CaseStatement.When c = (CaseStatement.When)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new ArrayList<CaseStatement.When>(Arrays.asList(c)); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_when_list",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // case_when ::= WHEN expression THEN statement 
            {
              CaseStatement.When RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new CaseStatement.When(val, st); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_when",9, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // case_else ::= ELSE statement 
            {
              CaseStatement.Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new CaseStatement.Else(st); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_else",11, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // case_else ::= 
            {
              CaseStatement.Else RESULT =null;

              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("case_else",11, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elsif_list ::= elsif_list ELSIF expression THEN statement_list 
            {
              List<IfStatement.Elsif> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		List<IfStatement.Elsif> l = (List<IfStatement.Elsif>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(new IfStatement.Elsif(cond, sl)); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("elsif_list",6, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elsif_list ::= 
            {
              List<IfStatement.Elsif> RESULT =null;
		 RESULT = new ArrayList<IfStatement.Elsif>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("elsif_list",6, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // else_block ::= ELSE statement_list 
            {
              IfStatement.Else RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new IfStatement.Else(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("else_block",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else_block ::= 
            {
              IfStatement.Else RESULT =null;

              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("else_block",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= boolean_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolean_or_expression ::= boolean_or_expression OR_OPERATOR boolean_and_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolean_or_expression ::= boolean_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolean_and_expression ::= boolean_and_expression AND_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolean_and_expression ::= boolean_not_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolean_not_expression ::= NOT_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolean_not_expression ::= boolean_between_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_between_expression ::= boolean_is_expression BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BetweenExpression(expr, l, r); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",25, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_between_expression ::= boolean_is_expression NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",25, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean_between_expression ::= boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",25, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean_is_expression ::= comparison_expression IS_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",26, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_is_expression ::= comparison_expression IS_OPERATOR NOT_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",26, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_is_expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",26, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparison_expression ::= comparison_expression LESS_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparison_expression ::= comparison_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparison_expression ::= comparison_expression GREATER_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparison_expression ::= comparison_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparison_expression ::= comparison_expression EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparison_expression ::= comparison_expression NOT_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparison_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // additive_expression ::= additive_expression ADDITION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additive_expression ::= additive_expression SUBTRACTION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additive_expression ::= additive_expression CONCATENATION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // multiplicative_expression ::= multiplicative_expression MULTIPLICATION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // multiplicative_expression ::= multiplicative_expression DIVISION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // multiplicative_expression ::= unary_numeric_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",21, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unary_numeric_expression ::= ADDITION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unary_numeric_expression ::= SUBTRACTION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_numeric_expression ::= exponentiation_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",22, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exponentiation_expression ::= exponentiation_expression EXPONENTIATION_OPERATOR expression_atom 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",23, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exponentiation_expression ::= expression_atom 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",23, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cursor ::= NAMED_CURSOR 
            {
              Cursor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NamedCursor(c); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",27, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cursor ::= IMPLICIT_CURSOR 
            {
              Cursor RESULT =null;
		 RESULT = new ImplicitCursor(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",27, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_atom ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new ExpressionIdentifier(id); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_atom ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_atom ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_atom ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new StringLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_atom ::= NUMBER_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NumberLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_atom ::= IDENTIFIER DOT EXISTS_OPERATOR LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Identifier collection = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CollectionExistExpression(collection, index); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_atom ::= cursor FOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_atom ::= cursor ISOPEN_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_atom ::= cursor NOTFOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_atom ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",24, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PLSQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
              return CUP$PLSQLParser$do_action_part00000000(
                               CUP$PLSQLParser$act_num,
                               CUP$PLSQLParser$parser,
                               CUP$PLSQLParser$stack,
                               CUP$PLSQLParser$top);
    }
}

}
