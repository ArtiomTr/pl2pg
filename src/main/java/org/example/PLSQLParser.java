
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java.util.List;
import java.util.ArrayList;
import org.example.plsql.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PLSQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PLSQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PLSQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PLSQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\011\002\000\002\010\003\000\002\007\006" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\005\006\000\002\006\007\000\002" +
    "\012\003\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\024\007\000\002\024\010\000\002\024\003\000" +
    "\002\025\005\000\002\025\006\000\002\025\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\026\003" +
    "\000\002\026\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\010\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\145\001\002\000\006\002\000\004\010\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\006\002\uffff\004\uffff\001" +
    "\002\000\010\005\ufffa\006\ufffa\056\ufffa\001\002\000\010" +
    "\005\017\006\014\056\016\001\002\000\010\005\ufff8\006" +
    "\ufff8\056\ufff8\001\002\000\010\005\ufff9\006\ufff9\056\ufff9" +
    "\001\002\000\010\005\ufffa\006\ufffa\056\ufffa\001\002\000" +
    "\010\005\ufffb\006\ufffb\056\ufffb\001\002\000\004\022\021" +
    "\001\002\000\004\015\020\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\030\014\024\020\033\032\034\033\041" +
    "\040\032\050\051\051\031\052\042\053\026\054\043\056" +
    "\027\001\002\000\046\015\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb" +
    "\044\uffdb\001\002\000\034\015\uffe9\021\uffe9\023\124\024" +
    "\123\025\127\026\126\027\122\030\125\036\uffe9\037\uffe9" +
    "\040\uffe9\043\uffe9\044\121\001\002\000\010\045\uffd4\046" +
    "\uffd4\047\uffd4\001\002\000\010\045\120\046\117\047\116" +
    "\001\002\000\050\015\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\043" +
    "\uffd2\044\uffd2\001\002\000\052\015\uffd3\017\111\021\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\043\uffd3\044\uffd3\001\002\000\010\015" +
    "\ufff5\021\ufff5\037\107\001\002\000\050\015\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\043\uffd0\044\uffd0\001\002\000\030\014" +
    "\024\020\033\032\034\033\041\040\032\050\051\051\031" +
    "\052\042\053\026\054\043\056\027\001\002\000\030\014" +
    "\024\020\033\032\034\033\041\040\032\050\051\051\031" +
    "\052\042\053\026\054\043\056\027\001\002\000\026\014" +
    "\024\020\033\032\034\033\041\050\051\051\031\052\042" +
    "\053\026\054\043\056\027\001\002\000\012\015\ufff3\021" +
    "\ufff3\036\101\037\ufff3\001\002\000\004\015\100\001\002" +
    "\000\042\015\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\073\032\074\033\072\036\uffe2" +
    "\037\uffe2\040\uffe2\043\uffe2\044\uffe2\001\002\000\050\015" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\070\043\uffd8\044\uffd8\001\002" +
    "\000\026\014\024\020\033\032\034\033\041\050\051\051" +
    "\031\052\042\053\026\054\043\056\027\001\002\000\050" +
    "\015\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\001" +
    "\002\000\010\045\uffd5\046\uffd5\047\uffd5\001\002\000\046" +
    "\015\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\064\035\063" +
    "\036\uffde\037\uffde\040\uffde\043\uffde\044\uffde\001\002\000" +
    "\050\015\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6" +
    "\001\002\000\012\015\ufff1\021\ufff1\036\ufff1\037\ufff1\001" +
    "\002\000\012\015\uffef\021\uffef\036\uffef\037\uffef\001\002" +
    "\000\016\015\uffec\021\uffec\036\uffec\037\uffec\040\052\043" +
    "\053\001\002\000\050\015\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\043\uffd1\044\uffd1\001\002\000\004\043\057\001\002\000" +
    "\026\014\024\020\033\032\034\033\041\050\051\051\031" +
    "\052\042\053\026\054\043\056\027\001\002\000\004\036" +
    "\055\001\002\000\026\014\024\020\033\032\034\033\041" +
    "\050\051\051\031\052\042\053\026\054\043\056\027\001" +
    "\002\000\012\015\uffee\021\uffee\036\uffee\037\uffee\001\002" +
    "\000\026\014\024\020\033\032\034\033\041\050\051\051" +
    "\031\052\042\053\026\054\043\056\027\001\002\000\004" +
    "\036\061\001\002\000\026\014\024\020\033\032\034\033" +
    "\041\050\051\051\031\052\042\053\026\054\043\056\027" +
    "\001\002\000\012\015\uffed\021\uffed\036\uffed\037\uffed\001" +
    "\002\000\026\014\024\020\033\032\034\033\041\050\051" +
    "\051\031\052\042\053\026\054\043\056\027\001\002\000" +
    "\026\014\024\020\033\032\034\033\041\050\051\051\031" +
    "\052\042\053\026\054\043\056\027\001\002\000\046\015" +
    "\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd\001\002\000\046" +
    "\015\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\043\uffdc\044\uffdc\001\002\000" +
    "\046\015\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\043\uffd9\044\uffd9\001\002" +
    "\000\022\014\024\020\033\050\051\051\031\052\042\053" +
    "\026\054\043\056\027\001\002\000\050\015\uffd7\021\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\043\uffd7\044\uffd7\001\002\000\026\014" +
    "\024\020\033\032\034\033\041\050\051\051\031\052\042" +
    "\053\026\054\043\056\027\001\002\000\026\014\024\020" +
    "\033\032\034\033\041\050\051\051\031\052\042\053\026" +
    "\054\043\056\027\001\002\000\026\014\024\020\033\032" +
    "\034\033\041\050\051\051\031\052\042\053\026\054\043" +
    "\056\027\001\002\000\046\015\uffe1\021\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\064\035\063\036\uffe1\037\uffe1\040\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\046\015\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\064\035\063\036\uffdf\037\uffdf\040\uffdf" +
    "\043\uffdf\044\uffdf\001\002\000\046\015\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\064\035\063\036\uffe0\037\uffe0\040" +
    "\uffe0\043\uffe0\044\uffe0\001\002\000\010\005\ufff7\006\ufff7" +
    "\056\ufff7\001\002\000\030\014\024\020\033\032\034\033" +
    "\041\040\032\050\051\051\031\052\042\053\026\054\043" +
    "\056\027\001\002\000\012\015\ufff2\021\ufff2\036\ufff2\037" +
    "\ufff2\001\002\000\046\015\uffda\021\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\043\uffda" +
    "\044\uffda\001\002\000\004\021\105\001\002\000\050\015" +
    "\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca\001\002" +
    "\000\012\015\ufff0\021\ufff0\036\ufff0\037\ufff0\001\002\000" +
    "\030\014\024\020\033\032\034\033\041\040\032\050\051" +
    "\051\031\052\042\053\026\054\043\056\027\001\002\000" +
    "\012\015\ufff4\021\ufff4\036\101\037\ufff4\001\002\000\004" +
    "\042\112\001\002\000\004\020\113\001\002\000\030\014" +
    "\024\020\033\032\034\033\041\040\032\050\051\051\031" +
    "\052\042\053\026\054\043\056\027\001\002\000\004\021" +
    "\115\001\002\000\050\015\uffce\021\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\001\002\000\050\015\uffcb\021\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\043\uffcb\044\uffcb\001\002\000\050\015\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\001\002\000" +
    "\050\015\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd" +
    "\001\002\000\006\040\136\050\137\001\002\000\026\014" +
    "\024\020\033\032\034\033\041\050\051\051\031\052\042" +
    "\053\026\054\043\056\027\001\002\000\026\014\024\020" +
    "\033\032\034\033\041\050\051\051\031\052\042\053\026" +
    "\054\043\056\027\001\002\000\026\014\024\020\033\032" +
    "\034\033\041\050\051\051\031\052\042\053\026\054\043" +
    "\056\027\001\002\000\026\014\024\020\033\032\034\033" +
    "\041\050\051\051\031\052\042\053\026\054\043\056\027" +
    "\001\002\000\026\014\024\020\033\032\034\033\041\050" +
    "\051\051\031\052\042\053\026\054\043\056\027\001\002" +
    "\000\026\014\024\020\033\032\034\033\041\050\051\051" +
    "\031\052\042\053\026\054\043\056\027\001\002\000\042" +
    "\015\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\073\032\074\033\072\036\uffe8\037\uffe8" +
    "\040\uffe8\043\uffe8\044\uffe8\001\002\000\042\015\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\073\032\074\033\072\036\uffe6\037\uffe6\040\uffe6\043" +
    "\uffe6\044\uffe6\001\002\000\042\015\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\073\032" +
    "\074\033\072\036\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5" +
    "\001\002\000\042\015\uffe4\021\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\073\032\074\033\072" +
    "\036\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\001\002\000" +
    "\042\015\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\073\032\074\033\072\036\uffe3\037" +
    "\uffe3\040\uffe3\043\uffe3\044\uffe3\001\002\000\042\015\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\073\032\074\033\072\036\uffe7\037\uffe7\040\uffe7" +
    "\043\uffe7\044\uffe7\001\002\000\004\050\140\001\002\000" +
    "\016\015\uffeb\021\uffeb\036\uffeb\037\uffeb\040\uffeb\043\uffeb" +
    "\001\002\000\016\015\uffea\021\uffea\036\uffea\037\uffea\040" +
    "\uffea\043\uffea\001\002\000\010\005\142\006\014\056\016" +
    "\001\002\000\004\006\143\001\002\000\004\015\144\001" +
    "\002\000\010\005\ufff6\006\ufff6\056\ufff6\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\002\003\011\004\001\001\000\002\001" +
    "\001\000\006\007\005\010\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\010\001\001\000\010\004" +
    "\014\005\012\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\035\013\027\014\034\015\045\016\022\017\036\020" +
    "\043\021\021\022\037\023\044\024\046\025\047\026\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\105\016" +
    "\022\017\036\020\043\021\021\022\037\023\044\024\046" +
    "\025\047\026\024\001\001\000\034\012\103\013\027\014" +
    "\034\015\045\016\022\017\036\020\043\021\021\022\037" +
    "\023\044\024\046\025\047\026\024\001\001\000\012\021" +
    "\102\022\037\023\044\026\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\066\022\037\023\044\026\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\022\017" +
    "\036\020\043\021\021\022\037\023\044\025\053\026\024" +
    "\001\001\000\002\001\001\000\022\016\022\017\036\020" +
    "\043\021\021\022\037\023\044\025\055\026\024\001\001" +
    "\000\002\001\001\000\022\016\022\017\036\020\043\021" +
    "\021\022\037\023\044\025\057\026\024\001\001\000\002" +
    "\001\001\000\022\016\022\017\036\020\043\021\021\022" +
    "\037\023\044\025\061\026\024\001\001\000\002\001\001" +
    "\000\012\021\065\022\037\023\044\026\024\001\001\000" +
    "\012\021\064\022\037\023\044\026\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\070\026\024\001\001\000\002\001\001\000\014\020\076" +
    "\021\021\022\037\023\044\026\024\001\001\000\014\020" +
    "\075\021\021\022\037\023\044\026\024\001\001\000\014" +
    "\020\074\021\021\022\037\023\044\026\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\101\016\022\017\036\020\043\021" +
    "\021\022\037\023\044\024\046\025\047\026\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\107\015\045" +
    "\016\022\017\036\020\043\021\021\022\037\023\044\024" +
    "\046\025\047\026\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\113\013\027\014" +
    "\034\015\045\016\022\017\036\020\043\021\021\022\037" +
    "\023\044\024\046\025\047\026\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\134\020" +
    "\043\021\021\022\037\023\044\026\024\001\001\000\016" +
    "\017\133\020\043\021\021\022\037\023\044\026\024\001" +
    "\001\000\016\017\132\020\043\021\021\022\037\023\044" +
    "\026\024\001\001\000\016\017\131\020\043\021\021\022" +
    "\037\023\044\026\024\001\001\000\016\017\130\020\043" +
    "\021\021\022\037\023\044\026\024\001\001\000\016\017" +
    "\127\020\043\021\021\022\037\023\044\026\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\014\005\012\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PLSQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PLSQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PLSQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PLSQLParser$actions {
  private final PLSQLParser parser;

  /** Constructor */
  CUP$PLSQLParser$actions(PLSQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action_part00000000(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PLSQLParser$result;

      /* select the action based on the action number */
      switch (CUP$PLSQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		RESULT = start_val;
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PLSQLParser$parser.done_parsing();
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= plsql_block_list 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		List<Block> b = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // plsql_block_list ::= plsql_block_list plsql_block 
            {
              List<Block> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Block> l = (List<Block>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // plsql_block_list ::= 
            {
              List<Block> RESULT =null;
		 RESULT = new ArrayList<Block>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block_list",7, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // plsql_block ::= body 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new Block(b); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("plsql_block",6, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_list END SEMI 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new Body(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		AssignmentStatement s = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		LoopStatement s = (LoopStatement)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment_statement ::= IDENTIFIER ASSIGNMENT_OPERATOR expression SEMI 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new AssignmentStatement(id, value); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",3, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // loop_statement ::= LOOP statement_list END LOOP SEMI 
            {
              LoopStatement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new LoopStatement(sl); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("loop_statement",4, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= boolean_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolean_or_expression ::= boolean_or_expression OR_OPERATOR boolean_and_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",9, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean_or_expression ::= boolean_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_or_expression",9, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean_and_expression ::= boolean_and_expression AND_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean_and_expression ::= boolean_not_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_and_expression",10, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolean_not_expression ::= NOT_OPERATOR boolean_not_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",11, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolean_not_expression ::= boolean_between_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_not_expression",11, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_between_expression ::= boolean_is_expression BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BetweenExpression(expr, l, r); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_between_expression ::= boolean_is_expression NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression AND_OPERATOR boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_between_expression ::= boolean_is_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_between_expression",18, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_is_expression ::= comparison_expression IS_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		 RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_is_expression ::= comparison_expression IS_OPERATOR NOT_OPERATOR NULL_LITERAL 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)).value;
		 RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_is_expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("boolean_is_expression",19, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparison_expression ::= comparison_expression LESS_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparison_expression ::= comparison_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparison_expression ::= comparison_expression GREATER_THAN_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparison_expression ::= comparison_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparison_expression ::= comparison_expression EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparison_expression ::= comparison_expression NOT_EQUAL_OPERATOR additive_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparison_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("comparison_expression",12, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // additive_expression ::= additive_expression ADDITION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // additive_expression ::= additive_expression SUBTRACTION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // additive_expression ::= additive_expression CONCATENATION_OPERATOR multiplicative_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("additive_expression",13, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicative_expression ::= multiplicative_expression MULTIPLICATION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multiplicative_expression ::= multiplicative_expression DIVISION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // multiplicative_expression ::= unary_numeric_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",14, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unary_numeric_expression ::= ADDITION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unary_numeric_expression ::= SUBTRACTION_OPERATOR unary_numeric_expression 
            {
              Expression RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unary_numeric_expression ::= exponentiation_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("unary_numeric_expression",15, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exponentiation_expression ::= exponentiation_expression EXPONENTIATION_OPERATOR expression_atom 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exponentiation_expression ::= expression_atom 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("exponentiation_expression",16, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cursor ::= NAMED_CURSOR 
            {
              Cursor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NamedCursor(c); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cursor ::= IMPLICIT_CURSOR 
            {
              Cursor RESULT =null;
		 RESULT = new ImplicitCursor(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("cursor",20, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_atom ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new ExpressionIdentifier(id); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression_atom ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression_atom ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression_atom ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new StringLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression_atom ::= NUMBER_LITERAL 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.peek()).value;
		 RESULT = new NumberLiteral(val); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression_atom ::= IDENTIFIER DOT EXISTS_OPERATOR LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).right;
		Identifier collection = (Identifier)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CollectionExistExpression(collection, index); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_atom ::= cursor FOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_atom ::= cursor ISOPEN_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_atom ::= cursor NOTFOUND_OPERATOR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Cursor c = (Cursor)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_atom ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-1)).value;
		 RESULT = expr; 
              CUP$PLSQLParser$result = parser.getSymbolFactory().newSymbol("expression_atom",17, ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.elementAt(CUP$PLSQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PLSQLParser$stack.peek()), RESULT);
            }
          return CUP$PLSQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PLSQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PLSQLParser$do_action(
    int                        CUP$PLSQLParser$act_num,
    java_cup.runtime.lr_parser CUP$PLSQLParser$parser,
    java.util.Stack            CUP$PLSQLParser$stack,
    int                        CUP$PLSQLParser$top)
    throws java.lang.Exception
    {
              return CUP$PLSQLParser$do_action_part00000000(
                               CUP$PLSQLParser$act_num,
                               CUP$PLSQLParser$parser,
                               CUP$PLSQLParser$stack,
                               CUP$PLSQLParser$top);
    }
}

}
