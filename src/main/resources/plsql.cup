package org.example.plsql.main.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.example.plsql.ast.*;

parser code {:
    private TypeToken optionalNonNullable(TypeToken t, Boolean nonNullable) {
        if (nonNullable) {
            return new NonNullTypeToken(t);
        } else {
            return t;
        }
    }
:}

// Keywords
terminal BEGIN, END, LOOP, IF, THEN, ELSIF, ELSE, RETURN, IMPLICIT_CURSOR, CASE, WHEN, TYPE, SUBTYPE, RANGE, DECLARE,
         CHARACTER, SET, TABLE, OF, INDEX, BY, RECORD, REF, CURSOR, VARRAY, VARYING, ARRAY, PLS_INTEGER, BINARY_INTEGER,
         VARCHAR, VARCHAR2, STRING, LONG, DEFAULT;
// Punctuation
terminal SEMI, COMMA, DOT, LEFT_PARENTHESIS, RIGHT_PARENTHESIS;
// Operators
terminal ASSIGNMENT_OPERATOR, EQUAL_OPERATOR, NOT_EQUAL_OPERATOR, LESS_THAN_OPERATOR, GREATER_THAN_OPERATOR,
         LESS_THAN_OR_EQUAL_OPERATOR, GREATER_THAN_OR_EQUAL_OPERATOR, CONCATENATION_OPERATOR, ADDITION_OPERATOR,
         SUBTRACTION_OPERATOR, MULTIPLICATION_OPERATOR, DIVISION_OPERATOR, AND_OPERATOR, OR_OPERATOR, NOT_OPERATOR,
         EXPONENTIATION_OPERATOR, EXISTS_OPERATOR, BETWEEN_OPERATOR, IS_OPERATOR, FOUND_OPERATOR, ISOPEN_OPERATOR,
         NOTFOUND_OPERATOR, RANGE_OPERATOR, ROWTYPE_ATTRIBUTE_OPERATOR, TYPE_ATTRIBUTE_OPERATOR;

// Literals
terminal NULL_LITERAL;
terminal String STRING_LITERAL;
terminal String NUMBER_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
// Identifiers
terminal String NAMED_CURSOR, LABEL;
terminal Identifier IDENTIFIER;

non terminal Program program;
non terminal List<Statement> statement_list;
non terminal Statement statement, statement_inner;
non terminal List<Label> label_list;
non terminal Label closing_label;
non terminal AssignmentStatement assignment_statement;
non terminal LoopStatement loop_statement;
non terminal IfStatement if_statement;
non terminal List<IfStatement.Elsif> elsif_list;
non terminal IfStatement.Else else_block;
non terminal CaseStatement case_statement;
non terminal CaseStatement.When case_when;
non terminal List<CaseStatement.When> case_when_list;
non terminal CaseStatement.Else case_else;
non terminal Body body;
non terminal DeclareSection declare_section;
non terminal List<Declaration> declare_item_list;
non terminal Declaration declaration_item;
non terminal Boolean opt_not_null;
non terminal Block plsql_block;
non terminal List<Block> plsql_block_list;
non terminal Expression expression, boolean_or_expression, boolean_and_expression, boolean_not_expression,
                        comparison_expression, additive_expression, multiplicative_expression, unary_numeric_expression,
                        exponentiation_expression, expression_atom, boolean_between_expression, boolean_is_expression;
non terminal Cursor cursor;
non terminal TypeToken type_def, datatype, index_type;
non terminal SubtypeDefinition.Constraint constraint;
non terminal varr, record_initial_value_operator, opt_comma;
non terminal List<RecordTypeToken.FieldDefinition> record_field_definition_list;
non terminal RecordTypeToken.FieldDefinition record_field_definition;
non terminal TypeAttribute type_attribute;
non terminal RowTypeAttribute rowtype_attribute;

start with program;

program ::= plsql_block_list:b                                  {: RESULT = new Program(b); :};

plsql_block_list ::= plsql_block_list:l plsql_block:b           {: l.add(b); RESULT = l; :}
    | /* empty plsql_block list */                              {: RESULT = new ArrayList<Block>(); :}
    ;

plsql_block ::= declare_section:d body:b                        {: RESULT = new Block(b, d); :};

body ::= BEGIN statement_list:sl END closing_label:l SEMI       {: RESULT = new Body(sl, l); :};

statement_list ::= statement_list:sl statement:s                {: sl.add(s); RESULT = sl; :}
    | /* empty statement list */                                {: RESULT = new ArrayList<Statement>(); :}
    ;

statement ::= label_list:l statement_inner:s                    {: s.setLabels(l); RESULT = s; :};

statement_inner ::=
      assignment_statement:s                                    {: RESULT = s; :}
    | loop_statement:s                                          {: RESULT = s; :}
    | if_statement:s                                            {: RESULT = s; :}
    | case_statement:s                                          {: RESULT = s; :}
    | plsql_block:s                                             {: RESULT = s; :}
    ;

label_list ::=
      label_list:ls LABEL:l                                     {: ls.add(new Label(l)); RESULT = ls; :}
    | /* empty label list */                                    {: RESULT = new ArrayList<Label>(); :}
    ;

assignment_statement ::=
    IDENTIFIER:id ASSIGNMENT_OPERATOR expression:value SEMI     {: RESULT = new AssignmentStatement(id, value); :};

loop_statement ::= LOOP statement_list:sl END LOOP SEMI         {: RESULT = new LoopStatement(sl); :};

if_statement ::=
    IF expression:cond THEN statement_list:sl
        elsif_list:el else_block:alt END IF SEMI                {: RESULT = new IfStatement(cond, sl, el, alt); :};

case_statement ::=
      CASE expression:selector
          case_when_list:cl case_else:el END CASE SEMI          {: RESULT = new CaseStatement(selector, cl, el); :}
    | CASE case_when_list:cl case_else:el END CASE SEMI         {: RESULT = new CaseStatement(null, cl, el); :}
    ;

case_when_list ::=
      case_when_list:l case_when:c                              {: l.add(c); RESULT = l; :}
    | case_when:c                                               {: RESULT = new ArrayList<CaseStatement.When>(Arrays.asList(c)); :}
    ;

case_when ::= WHEN expression:val THEN statement:st             {: RESULT = new CaseStatement.When(val, st); :};

case_else ::=
      ELSE statement:st                                         {: RESULT = new CaseStatement.Else(st); :}
    | /* no else statement */
    ;

elsif_list ::=
      elsif_list:l ELSIF expression:cond THEN statement_list:sl {: l.add(new IfStatement.Elsif(cond, sl)); RESULT = l; :}
    | /* empty elsif list */                                    {: RESULT = new ArrayList<IfStatement.Elsif>(); :}
    ;
else_block ::=
      ELSE statement_list:sl                                    {: RESULT = new IfStatement.Else(sl); :}
    | /* no else block */
    ;

expression ::= boolean_or_expression:expr                       {: RESULT = expr; :};

boolean_or_expression ::=
      boolean_or_expression:lhs
          OR_OPERATOR boolean_and_expression:rhs                {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.OR); :}
    | boolean_and_expression:expr                               {: RESULT = expr; :}
    ;

boolean_and_expression ::=
      boolean_and_expression:lhs
          AND_OPERATOR boolean_not_expression:rhs               {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.AND); :}
    | boolean_not_expression:expr                               {: RESULT = expr; :}
    ;

boolean_not_expression ::=
      NOT_OPERATOR boolean_not_expression:arg                   {: RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NOT); :}
    | boolean_between_expression:expr                           {: RESULT = expr; :}
    ;

boolean_between_expression ::=
      boolean_is_expression:expr BETWEEN_OPERATOR boolean_is_expression:l
          AND_OPERATOR boolean_is_expression:r                  {: RESULT = new BetweenExpression(expr, l, r); :}
    | boolean_is_expression:expr NOT_OPERATOR BETWEEN_OPERATOR boolean_is_expression:l
          AND_OPERATOR boolean_is_expression:r                  {: RESULT = new UnaryExpression(new BetweenExpression(expr, l, r), UnaryExpression.Operator.NOT); :}
    | boolean_is_expression:expr                                {: RESULT = expr; :}
    ;

boolean_is_expression ::=
      comparison_expression:expr IS_OPERATOR NULL_LITERAL       {: RESULT = new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS); :}
    | comparison_expression:expr IS_OPERATOR
          NOT_OPERATOR NULL_LITERAL                             {: RESULT = new UnaryExpression(new BinaryExpression(expr, new NullLiteral(), BinaryExpression.Operator.IS), UnaryExpression.Operator.NOT); :}
    | comparison_expression:expr                                {: RESULT = expr; :}
    ;

comparison_expression ::=
      comparison_expression:lhs
          LESS_THAN_OPERATOR additive_expression:rhs            {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN); :}
    | comparison_expression:lhs
          LESS_THAN_OR_EQUAL_OPERATOR additive_expression:rhs   {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.LESS_THAN_OR_EQUAL); :}
    | comparison_expression:lhs
          GREATER_THAN_OPERATOR additive_expression:rhs         {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN); :}
    | comparison_expression:lhs GREATER_THAN_OR_EQUAL_OPERATOR
          additive_expression:rhs                               {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.GREATER_THAN_OR_EQUAL); :}
    | comparison_expression:lhs
          EQUAL_OPERATOR additive_expression:rhs                {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EQUAL); :}
    | comparison_expression:lhs
          NOT_EQUAL_OPERATOR additive_expression:rhs            {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.NOT_EQUAL); :}
    | additive_expression:expr                                  {: RESULT = expr; :}
    ;

additive_expression ::=
      additive_expression:lhs
          ADDITION_OPERATOR multiplicative_expression:rhs       {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.ADDITION); :}
    | additive_expression:lhs
          SUBTRACTION_OPERATOR multiplicative_expression:rhs    {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.SUBTRACTION); :}
    | additive_expression:lhs
          CONCATENATION_OPERATOR multiplicative_expression:rhs  {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.CONCATENATION); :}
    | multiplicative_expression:expr                            {: RESULT = expr; :}
    ;

multiplicative_expression ::=
      multiplicative_expression:lhs
          MULTIPLICATION_OPERATOR unary_numeric_expression:rhs  {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.MULTIPLICATION); :}
    | multiplicative_expression:lhs
          DIVISION_OPERATOR unary_numeric_expression:rhs        {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.DIVISION); :}
    | unary_numeric_expression:expr                             {: RESULT = expr; :}
    ;

unary_numeric_expression ::=
      ADDITION_OPERATOR unary_numeric_expression:arg            {: RESULT = new UnaryExpression(arg, UnaryExpression.Operator.IDENTITY); :}
    | SUBTRACTION_OPERATOR unary_numeric_expression:arg         {: RESULT = new UnaryExpression(arg, UnaryExpression.Operator.NEGATION); :}
    | exponentiation_expression:expr                            {: RESULT = expr; :}
    ;

exponentiation_expression ::=
      exponentiation_expression:lhs
          EXPONENTIATION_OPERATOR expression_atom:rhs           {: RESULT = new BinaryExpression(lhs, rhs, BinaryExpression.Operator.EXPONENTIATION); :}
    | expression_atom:expr                                      {: RESULT = expr; :}
    ;

declare_section ::=
      DECLARE declare_item_list:l                               {: RESULT = new DeclareSection(l); :}
    | /* empty declare block */
    ;

declare_item_list ::=
      declare_item_list:l declaration_item:i                    {: l.add(i); RESULT = l; :}
    | declaration_item:i                                        {: RESULT = new ArrayList<Declaration>(Arrays.asList(i)); :}
    ;

declaration_item ::=
      TYPE IDENTIFIER:i IS_OPERATOR type_def:t SEMI             {: RESULT = new TypeDefinition(i, t); :}
      // TODO: base_type could also be builtin PL/SQL data type
    | SUBTYPE IDENTIFIER:i IS_OPERATOR IDENTIFIER:b
          constraint:c opt_not_null:n SEMI                      {: RESULT = new SubtypeDefinition(i, optionalNonNullable(new TypeReference(b), n), c); :}
    ;

constraint ::=
      NUMBER_LITERAL:precision                                  {: RESULT = new SubtypeDefinition.PrecisionConstraint(new NumberLiteral(precision), null); :}
    | NUMBER_LITERAL:precision COMMA NUMBER_LITERAL:scale       {: RESULT = new SubtypeDefinition.PrecisionConstraint(new NumberLiteral(precision), new NumberLiteral(scale)); :}
    | RANGE NUMBER_LITERAL:l RANGE_OPERATOR NUMBER_LITERAL:h    {: RESULT = new SubtypeDefinition.RangeConstraint(new NumberLiteral(l), new NumberLiteral(h)); :}
    | CHARACTER SET STRING_LITERAL:s                            {: RESULT = new SubtypeDefinition.CharacterSetConstraint(new StringLiteral(s)); :}
    | /* no constraint */
    ;

type_def ::=
      TABLE OF datatype:dt opt_not_null:n                       {: RESULT = new NestedTableTypeToken(optionalNonNullable(dt, n)); :}
    | TABLE OF datatype:dt opt_not_null:n INDEX BY index_type:t {: RESULT = new AssocArrayTypeToken(optionalNonNullable(dt, n), t); :}
    | varr LEFT_PARENTHESIS NUMBER_LITERAL:limit RIGHT_PARENTHESIS
          OF datatype:dt opt_not_null:n                         {: RESULT = new VaryingArrayTypeToken(new NumberLiteral(limit), optionalNonNullable(dt, n)); :}
    | RECORD LEFT_PARENTHESIS record_field_definition_list:l
          opt_comma RIGHT_PARENTHESIS                           {: RESULT = new RecordTypeToken(l); :}
    | REF CURSOR                                                {: RESULT = new RefCursorTypeToken(null); :}
    | REF CURSOR RETURN IDENTIFIER:i                            {: RESULT = new RefCursorTypeToken(new TypeReference(i)); :}
    | REF CURSOR RETURN IDENTIFIER:i ROWTYPE_ATTRIBUTE_OPERATOR {: RESULT = new RefCursorTypeToken(new RowTypeAttribute(i)); :}
    | REF CURSOR RETURN IDENTIFIER:i TYPE_ATTRIBUTE_OPERATOR    {: RESULT = new RefCursorTypeToken(new TypeAttribute(i, null)); :}
    ;

opt_comma ::= COMMA | ;

opt_not_null ::=
      NOT_OPERATOR NULL_LITERAL                                 {: RESULT = true; :}
    | /* nullable */                                            {: RESULT = false; :}
    ;

varr ::=
      VARRAY
    | ARRAY
    | VARYING ARRAY
    ;

datatype ::=
      IDENTIFIER:i                                              {: RESULT = new TypeReference(i); :}
    | REF IDENTIFIER:ot                                         {: RESULT = new TypeReferenceOperator(ot); :}
    | type_attribute:t                                          {: RESULT = t; :}
    | rowtype_attribute:t                                       {: RESULT = t; :}
    ;

index_type ::=
      PLS_INTEGER                                               {: RESULT = new BuiltinTypeToken(BuiltinTypeToken.Type.PLS_INTEGER); :}
    | BINARY_INTEGER                                            {: RESULT = new BuiltinTypeToken(BuiltinTypeToken.Type.BINARY_INTEGER); :}
    | VARCHAR
          LEFT_PARENTHESIS NUMBER_LITERAL:sz RIGHT_PARENTHESIS  {: RESULT = new BuiltinVaryingTypeToken(BuiltinVaryingTypeToken.Type.VARCHAR, new NumberLiteral(sz)); :}
    | VARCHAR2
          LEFT_PARENTHESIS NUMBER_LITERAL:sz RIGHT_PARENTHESIS  {: RESULT = new BuiltinVaryingTypeToken(BuiltinVaryingTypeToken.Type.VARCHAR2, new NumberLiteral(sz)); :}
    | STRING
          LEFT_PARENTHESIS NUMBER_LITERAL:sz RIGHT_PARENTHESIS  {: RESULT = new BuiltinVaryingTypeToken(BuiltinVaryingTypeToken.Type.STRING, new NumberLiteral(sz)); :}
    | LONG                                                      {: RESULT = new BuiltinTypeToken(BuiltinTypeToken.Type.LONG); :}
    | type_attribute:t                                          {: RESULT = t; :}
    | rowtype_attribute:t                                       {: RESULT = t; :}
    ;

type_attribute ::=
      IDENTIFIER:id TYPE_ATTRIBUTE_OPERATOR                     {: RESULT = new TypeAttribute(id, null); :}
    | IDENTIFIER:id DOT IDENTIFIER:f TYPE_ATTRIBUTE_OPERATOR    {: RESULT = new TypeAttribute(id, f);    :}
    ;

rowtype_attribute ::= IDENTIFIER:id ROWTYPE_ATTRIBUTE_OPERATOR  {: RESULT = new RowTypeAttribute(id); :};

record_field_definition_list ::=
      record_field_definition_list:l COMMA
          record_field_definition:d                             {: l.add(d); RESULT = l; :}
    | record_field_definition:d                                 {: RESULT = new ArrayList(Arrays.asList(d)); :}
    ;

record_field_definition ::=
      IDENTIFIER:f datatype:dt                                  {: RESULT = new RecordTypeToken.FieldDefinition(f, dt, null); :}
    | IDENTIFIER:f datatype:dt opt_not_null:n
          record_initial_value_operator expression:initial      {: RESULT = new RecordTypeToken.FieldDefinition(f, optionalNonNullable(dt, n), initial); :}
    ;

record_initial_value_operator ::= DEFAULT | ASSIGNMENT_OPERATOR;

cursor ::=
      NAMED_CURSOR:c                                            {: RESULT = new NamedCursor(c); :}
    | IMPLICIT_CURSOR                                           {: RESULT = new ImplicitCursor(); :}
    ;

expression_atom ::=
      IDENTIFIER:id                                             {: RESULT = new ExpressionIdentifier(id); :}
    | BOOLEAN_LITERAL:val                                       {: RESULT = new BooleanLiteral(val); :}
    | NULL_LITERAL                                              {: RESULT = new NullLiteral(); :}
    | STRING_LITERAL:val                                        {: RESULT = new StringLiteral(val); :}
    | NUMBER_LITERAL:val                                        {: RESULT = new NumberLiteral(val); :}
    | IDENTIFIER:collection DOT EXISTS_OPERATOR
          LEFT_PARENTHESIS expression:index RIGHT_PARENTHESIS   {: RESULT = new CollectionExistExpression(collection, index); :}
    | cursor:c FOUND_OPERATOR                                   {: RESULT = new CursorExpression(c, CursorExpression.Operator.FOUND); :}
    | cursor:c ISOPEN_OPERATOR                                  {: RESULT = new CursorExpression(c, CursorExpression.Operator.ISOPEN); :}
    | cursor:c NOTFOUND_OPERATOR                                {: RESULT = new CursorExpression(c, CursorExpression.Operator.NOTFOUND); :}
    | LEFT_PARENTHESIS expression:expr RIGHT_PARENTHESIS        {: RESULT = expr; :}
    ;

closing_label ::=
      IDENTIFIER:l                                              {: RESULT = new Label(l); :}
    | /* no closing label */
    ;